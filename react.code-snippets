{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "My state destructuring": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "cs",
    "body": "const {$2} = this.state$1;"
  },
  "My props destructuring": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": "cp",
    "body": "const {$2} = this.props$1;"
  },
  "My useCallback": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "useCallback",
    "body": "const ${1:callback} = useCallback(($3) => {$4}, [$2]);"
  },
  "My useState": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "useState",
    "body": "const [${1:state}, ${2:setState}] = useState(${3:initialValue});"
  },
  "My useEffect": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "useEffect",
    "body": "useEffect(() => {$2}, [$1]);"
  },
  "My useContext": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "useContext",
    "body": "const ${1:name} = useContext($2);"
  },
  "My useRef": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "useRef",
    "body": "const ${1:name} = useRef($2);"
  },
  "My useMemo": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "useMemo",
    "body": "const ${1:name} = useMemo(() => $3, [$2]);"
  }
}
