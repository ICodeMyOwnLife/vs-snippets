{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "My state destructuring": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": ["cs", "stateDestructuring"],
    "body": "const {$2} = this.state$1;"
  },
  "My props destructuring": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": ["cp", "propDestructuring"],
    "body": "const {$2} = this.props$1;"
  },
  "My useCallback declaration": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ucb", "useCallback"],
    "body": "const ${1:callback} = useCallback(($3) => {$4}, [$2]);"
  },
  "My useCallback": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ucb", "useCallback"],
    "body": "useCallback(($3) => {$4}, [$2])"
  },
  "My useCallback creator": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ucbCreator", "useCallbackCreator"],
    "body": [
      "export const use$1 = ($2) =>",
      "  useCallback(($4) => {$0}, [$3]);"
    ]
  },
  "My useState": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["us", "useState"],
    "body": "const [${1:state}, ${2:setState}] = useState(${3:initialValue});"
  },
  "My useEffect": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ue", "useEffect"],
    "body": "useEffect(() => {$2}, [$1]);"
  },
  "My useLayoutEffect": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ule", "useLayoutEffect"],
    "body": "useLayoutEffect(() => {$2}, [$1]);"
  },
  "My useContext": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["uct", "useContext"],
    "body": "const ${1:name} = useContext($2);"
  },
  "My useRef": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["uref", "useRef"],
    "body": "const ${1:name} = useRef($2);"
  },
  "My useMemo": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["um", "useMemo"],
    "body": "useMemo(() => $3, [$2])"
  },
  "My useMemo declaration": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["um", "useMemo"],
    "body": "const ${1:name} = useMemo(() => $3, [$2]);"
  },
  "My useReducer": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ur", "useReducer"],
    "body": "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${4:initialValue});"
  },
  "My lazy load component": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "lazy",
    "body": ["lazy(() => import('$1'))"]
  },
  "My lazy load component declaration": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "lazy",
    "body": ["const ${2:Component} = lazy(() => import('$1'));"]
  },
  "My renderHook declaration": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["rh", "renderHook"],
    "body": "const {$2} = renderHook($1);"
  },
  "My shallow": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": ["shallow"],
    "body": "const ${1:wrapper} = shallow($2);"
  },
  "My mount": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["mount"],
    "body": "const ${1:wrapper} = mount($2);"
  },
  "My snapshot test": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["snapshot"],
    "body": "expect(toJson(${1:wrapper})).toMatchSnapshot();"
  },
  "Import classnames": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": ["i_classnames", "import_classnames"],
    "body": "import classnames from 'classnames';"
  }
}
