{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  /**
   *	Component Declarations
   */
  "React FC File (ts)": {
    "scope": "typescriptreact",
    "prefix": [
      "rfc",
      "reactFC"
    ],
    "body": [
      "import { type FC } from 'react';\n",
      "export interface $1Props {",
      "  $2",
      "}\n",
      "export const ${1:$TM_FILENAME_BASE}: FC<$1Props> = ({$3}) => (",
      "\t$0",
      ");\n"
    ]
  },
  "Memo FC File (ts)": {
    "scope": "typescriptreact",
    "prefix": [
      "mfc",
      "memoFC"
    ],
    "body": [
      "import { memo, type FC } from 'react';\n",
      "export interface $1Props {",
      "  $2",
      "}\n",
      "const ${1:$TM_FILENAME_BASE}Comp: FC<$1Props> = ({$3}) => (",
      "\t$0",
      ");\n",
      "export const $1 = memo($1Comp);\n"
    ]
  },
  "React FC Impl (ts)": {
    "scope": "typescriptreact",
    "prefix": [
      "rfc_",
      "reactFC_"
    ],
    "body": [
      "interface $1Props {",
      "  $2",
      "}\n",
      "const ${1:$TM_FILENAME_BASE}: FC<$1Props> = ({$3}) => (",
      "\t$0",
      ");\n"
    ]
  },
  "Memo FC Impl (ts)": {
    "scope": "typescriptreact",
    "prefix": [
      "mfc_",
      "memoFC_"
    ],
    "body": [
      "interface $1Props {",
      "  $2",
      "}\n",
      "const ${1:$TM_FILENAME_BASE}Comp: FC<$1Props> = ({$3}) => (",
      "\t$0",
      ");\n",
      "const $1 = memo($1Comp);\n"
    ]
  },
  "React FC File (js)": {
    "scope": "javascript,javascriptreact",
    "prefix": [
      "rfc",
      "reactFC"
    ],
    "body": [
      "export const ${1:$TM_FILENAME_BASE} = ({$2}) => (",
      "\t$0",
      ");\n",
    ]
  },
  "Memo FC File (js)": {
    "scope": "javascript,javascriptreact",
    "prefix": [
      "mfc",
      "memoFC"
    ],
    "body": [
      "const ${1:$TM_FILENAME_BASE}Comp = ({$2}) => (",
      "\t$0",
      ");\n",
      "export const $1 = memo($1Comp);\n"
    ]
  },
  "React FC container": {
    "scope": "typescriptreact",
    "prefix": [
      "rfcc",
      "reactFCContainer"
    ],
    "body": [
      "import { type FC } from 'react';\n",
      "export const ${1:$TM_FILENAME_BASE}: FC = () => (",
      "\t$0",
      ");\n",
    ]
  },
  "Memo FC container": {
    "scope": "typescriptreact",
    "prefix": [
      "mfcc",
      "memoFCContainer"
    ],
    "body": [
      "import { memo, type FC } from 'react';\n",
      "const ${1:$TM_FILENAME_BASE}Comp: FC = () => (",
      "\t$0",
      ");\n",
      "export const $1 = memo($1Comp);\n"
    ]
  },
  "React FC container Impl": {
    "scope": "typescriptreact",
    "prefix": [
      "rfcc_",
      "reactFCContainerImpl"
    ],
    "body": [
      "const ${1:$TM_FILENAME_BASE}: FC = () => (",
      "\t$0",
      ");\n",
    ]
  },
  "Memo FC container Impl": {
    "scope": "typescriptreact",
    "prefix": [
      "mfcc_",
      "memoFCContainerImpl"
    ],
    "body": [
      "const ${1:$TM_FILENAME_BASE}Comp: FC = () => (",
      "\t$0",
      ");\n",
      "const $1 = memo($1Comp);\n"
    ]
  },
  "React page (ts)": {
    "scope": "typescriptreact",
    "prefix": [
      "rp",
      "reactPage"
    ],
    "body": [
      "import { FC } from 'react';\n",
      "const ${1:$TM_FILENAME_BASE}: FC = () => (",
      "\t$0",
      ");\n",
      "export default $1;\n"
    ]
  },
  "React page (js)": {
    "scope": "javascript,javascriptreact",
    "prefix": [
      "rp",
      "reactPage"
    ],
    "body": [
      "export const ${1:$TM_FILENAME_BASE} = () => (",
      "\t\t$0",
      "\t);\n",
      "export default $1;\n"
    ]
  },
  "React ForwardRefExoticComponent": {
    "scope": "typescriptreact",
    "prefix": [
      "rfrc",
      "reactForwardRefComponent"
    ],
    "body": [
      "import { forwardRef } from 'react';\n",
      "export const ${1:$TM_FILENAME_BASE} = forwardRef<${4:RefType}, $1Props>(({$3}, ref) => (",
      "\t$0",
      "));\n",
      "export interface $1Props {$2}\n"
    ]
  },
  "React class component": {
    "scope": "typescriptreact",
    "prefix": [
      "rcc",
      "reactClassComponent"
    ],
    "body": [
      "import { Component } from 'react';\n",
      "export class ${1:$TM_FILENAME_BASE} extends Component<$1Props, $1State> {",
      "\treadonly state: Readonly<$1State> = {$4};\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t);",
      "\t}",
      "}\n",
      "export interface $1Props {$2}\n",
      "interface $1State {$3}\n"
    ]
  },
  "React pure component": {
    "scope": "typescriptreact",
    "prefix": [
      "rpc",
      "reactPureComponent"
    ],
    "body": [
      "import { PureComponent } from 'react';\n",
      "export class ${1:$TM_FILENAME_BASE} extends PureComponent<$1Props, $1State> {",
      "\treadonly state: Readonly<$1State> = {$4};\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t);",
      "\t}",
      "}\n",
      "export interface $1Props {$2}\n",
      "interface $1State {$3}\n"
    ]
  },
  "React inherited component": {
    "scope": "typescriptreact",
    "prefix": [
      "ric",
      "reactInheritedComponent"
    ],
    "body": [
      "import React from 'react';",
      "import ${3:BaseComponent} from '$2';\n",
      "export class ${1:$TM_FILENAME_BASE} extends $3<$1Props, $1State> {",
      "\treadonly state: Readonly<$1State> = {$6};\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t);",
      "\t}",
      "}\n",
      "export interface $1Props {$4}\n",
      "interface $1State {$5}\n"
    ]
  },
  "higher-order component": {
    "scope": "typescriptreact",
    "prefix": [
      "hoc",
      "higherOrderComponent"
    ],
    "body": [
      "import { Component, ComponentType } from 'react';\n",
      "export function ${1:$TM_FILENAME_BASE}<${2:TOwnProps}, ${3:TState}>(${4:WrappedComponent}: ComponentType<$2 & $1Props>) {",
      "\treturn class $1 extends Component<$2, $3> {",
      "\t\trender() {",
      "\t\t\tconst props: $1Props = {$6};\n",
      "\t\t\treturn (",
      "\t\t\t\t<$4 {...props} {...this.props}$0 />",
      "\t\t\t);",
      "\t\t}",
      "\t}",
      "}\n",
      "export interface $1Props {$5}\n"
    ]
  },
  "Next function component expression (ts)": {
    "scope": "typescriptreact",
    "prefix": [
      "nfc",
      "nextFunctionComponent"
    ],
    "body": [
      "import React from 'react';",
      "import { NextPage } from 'next';\n",
      "export const ${1:$TM_FILENAME_BASE}: NextPage<$1Props> = ({$3}) => (",
      "\t$0",
      ");\n",
      "$1.getInitialProps = async () => {",
      "\treturn {};",
      "}\n",
      "export interface $1Props {$2}\n"
    ]
  },
  "Next simple function component expression (ts)": {
    "scope": "typescriptreact",
    "prefix": [
      "nsfc",
      "nextSimpleFunctionComponent"
    ],
    "body": [
      "import React from 'react';",
      "import { NextPage } from 'next';\n",
      "export const ${1:$TM_FILENAME_BASE}: NextPage = () => (",
      "\t$0",
      ");\n"
    ]
  },
  /**
   *	Class Component Utilities
   */
  "State destructuring": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      "cs",
      "stateDestructuring"
    ],
    "body": "const {$2} = this.state$1;"
  },
  "Props destructuring": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      "cp",
      "propDestructuring"
    ],
    "body": "const {$2} = this.props$1;"
  },
  /*
   * Component Members and Life-Cycle Methods
   */
  "React component constructor": {
    "scope": "typescriptreact",
    "prefix": [
      "cCtor"
    ],
    "body": [
      "constructor(${1:props}: ${2:Props}) {",
      "\tsuper($1);",
      "\t$0",
      "}"
    ]
  },
  "React component state": {
    "scope": "typescriptreact",
    "prefix": [
      "cState"
    ],
    "body": [
      "readonly state: Readonly<${1:ComponentState}> = {$0};"
    ]
  },
  "defaultProps": {
    "scope": "typescriptreact",
    "prefix": [
      "defaultProps"
    ],
    "body": "static readonly defaultProps: DefaultPropsOf$1<${2:Props}, \"${3}\"> = {$0};"
  },
  "propTypes": {
    "scope": "typescriptreact",
    "prefix": [
      "propTypes"
    ],
    "body": "static readonly propTypes: WeakValidationMap$1<${2:Props}> = {$0};"
  },
  "React renderX method": {
    "scope": "typescriptreact",
    "prefix": [
      "renX"
    ],
    "body": [
      "private render${1:Something}($2) {",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "}"
    ]
  },
  "React render method": {
    "scope": "typescriptreact",
    "prefix": [
      "ren"
    ],
    "body": [
      "render() {",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "}"
    ]
  },
  "componentDidMount": {
    "scope": "typescriptreact",
    "prefix": [
      "cdm"
    ],
    "body": [
      "componentDidMount() {",
      "\t$0",
      "}"
    ]
  },
  "componentDidCatch": {
    "scope": "typescriptreact",
    "prefix": [
      "cdc"
    ],
    "body": [
      "componentDidCatch(${1:error}: Error, ${2:errorInfo}: ErrorInfo) {",
      "\t$0",
      "}"
    ]
  },
  "shouldComponentUpdate": {
    "scope": "typescriptreact",
    "prefix": [
      "scu"
    ],
    "body": [
      "shouldComponentUpdate(${1:nextProps}: Readonly<${2:Props}>, ${3:nextState}: Readonly<${4:State}>, ${5:nextContext}: ${6:any}): boolean {",
      "\t$0",
      "}"
    ]
  },
  "componentWillUnmount": {
    "scope": "typescriptreact",
    "prefix": [
      "cwu"
    ],
    "body": [
      "componentWillUnmount() {",
      "\t$0",
      "}"
    ]
  },
  "setNativeProps": {
    "scope": "typescriptreact",
    "prefix": [
      "snp"
    ],
    "body": [
      "setNativeProps(${1:nativeProps}: Object) {",
      "\t${2:component}.setNativeProps($1);$0",
      "}"
    ]
  },
  "getDerivedStateFromProps": {
    "scope": "typescriptreact",
    "prefix": [
      "gdsfp"
    ],
    "body": [
      "static getDerivedStateFromProps(${1:nextProps}: Readonly<${2:Props}>, ${3:prevState}: ${4:State}): Partial<${4:State}> | null {",
      "\treturn {$0};",
      "}"
    ]
  },
  "getDerivedStateFromError": {
    "scope": "typescriptreact",
    "prefix": [
      "gdsfe"
    ],
    "body": [
      "static getDerivedStateFromError(${1:error}: any): Partial<${2:State}> | null {",
      "\treturn {$0};",
      "}"
    ]
  },
  /*
   * Hooks
   */
  "useCallback": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "ucb",
      "useCallback"
    ],
    "body": "useCallback(($3) => {$4}, [$2])"
  },
  "useCallback declaration": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "ucbDeclaration",
      "useCallbackDeclaration"
    ],
    "body": "const ${1:callback} = useCallback(($3) => {$4}, [$2]);"
  },
  "useCallback creator": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "ucbCreator",
      "useCallbackCreator"
    ],
    "body": [
      "export const use$1 = ($2) =>",
      "  useCallback(($4) => {$0}, [$3]);"
    ]
  },
  "useState": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "us",
      "useState"
    ],
    "body": "const [${1:state}, ${2:setState}] = useState(${3:initialState});"
  },
  "useEffect": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "ue",
      "useEffect"
    ],
    "body": "useEffect(() => {$2}, [$1]);"
  },
  "useLayoutEffect": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "ule",
      "useLayoutEffect"
    ],
    "body": "useLayoutEffect(() => {$2}, [$1]);"
  },
  "useContext": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "uct",
      "useContext"
    ],
    "body": "const ${1:name} = useContext($2);"
  },
  "useRef": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "uref",
      "useRef"
    ],
    "body": "const ${1:name} = useRef($2);"
  },
  "useMemo": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "um",
      "useMemo"
    ],
    "body": "useMemo(() => $3, [$2])"
  },
  "useMemo declaration": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "umDeclaration",
      "useMemoDeclaration"
    ],
    "body": "const ${1:name} = useMemo(() => $3, [$2]);"
  },
  "useReducer": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "ur",
      "useReducer"
    ],
    "body": "const [${1:state}, ${2:dispatch}] = useReducer(${3:reducer}, ${4:initialValue});"
  },
  "useImperativeHandle": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "uih",
      "useImperativeHandle"
    ],
    "body": "useImperativeHandle(${1:ref}, () => ({$0}), [$2]);"
  },
  "useStyles": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "useStyles"
    ],
    "body": [
      "import useStyles from './styles';",
      "const ${1:classes} = useStyles($2);"
    ]
  },
  "makeStyles": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "makeStyles"
    ],
    "body": [
      "import { makeStyles, createStyles } from '${1:@material-ui/core}';\n",
      "const styles = () =>",
      "\tcreateStyles({",
      "\t\t$0",
      "\t});\n",
      "const useStyles = makeStyles(styles, { name: '$2' });\n",
      "export default useStyles;\n"
    ]
  },
  /*
   * Helpers
   */
  "lazy load component": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "lazy",
    "body": [
      "lazy(() => import('$1'))"
    ]
  },
  "lazy load component declaration": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "lazyDeclaration",
    "body": [
      "const ${2:Component} = lazy(() => import('$1'));"
    ]
  },
  /*
   * Testing
   */
  "renderHook declaration": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "rh",
      "renderHook"
    ],
    "body": "const {$2} = renderHook($1);"
  },
  "shallow": {
    "scope": "javascriptreact,typescriptreact",
    "prefix": [
      "shallow"
    ],
    "body": "const ${1:wrapper} = shallow($2);"
  },
  "mount": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "mount"
    ],
    "body": "const ${1:wrapper} = mount($2);"
  },
  "snapshot test": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "snapshot"
    ],
    "body": "expect(toJson(${1:wrapper})).toMatchSnapshot();"
  },
  /*
   * Imports
   */
  "Import clsx": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "i_clsx",
      "import_clsx"
    ],
    "body": "import clsx from 'clsx';"
  },
  "Import classnames": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "i_classnames",
      "import_classnames"
    ],
    "body": "import classnames from 'classnames';"
  },
  "Import classes": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "i_classes",
      "import_classes"
    ],
    "body": "import ${2:classes} from '${1:./styles.module.scss}';"
  },
  "Import Material UI Core": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": [
      "i_mui",
      "import_Mui"
    ],
    "body": "import {$0} from '@material-ui/core';"
  }
}