{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  // Declarations
  "const": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "c",
    "body": "const ${1:name} = $2;"
  },
  "let": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "l",
    "body": "let ${1:name} = $2;"
  },
  "function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "f",
    "body": "function ${1:name}($2) {$0}"
  },
  "function expression": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "fe",
    "body": "const ${1:name} = ($2) => {$0};"
  },
  "generator function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "gf",
    "body": "function* ${1:name}($2) {$0}"
  },
  "async function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "af",
    "body": "async function ${1:name}($2) {$0}"
  },
  "async function expression": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "afe",
    "body": "const ${1:name} = async ($2) => {$0}"
  },
  "async generator function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "agf",
    "body": "async function* ${1:name}($2) {$0}"
  },
  "const object destructuring": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "cod",
    "body": "const {$2} = ${1:object};"
  },
  "let object destructuring": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "lod",
    "body": "let {$2} = ${1:object};"
  },
  "const array destructuring": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "cad",
    "body": "const [$2] = ${1:array};"
  },
  // Imports and require
  "import default": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["i", "importDefault"],
    "body": "import ${2:moduleName} from '${1:module-name}';"
  },
  "import destructuring": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["id", "importDestructuring"],
    "body": "import {$2} from '${1:module-name}';"
  },
  "import * as ns": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["i*", "importAll"],
    "body": "import * as ${2:all} from '${1:module-name}';"
  },
  "import require": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ir", "importRequire"],
    "body": "import ${2:module} = require('${1:path}');"
  },
  "import side-effect": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["imp", "importSideEffect"],
    "body": "import '${1:path}';"
  },
  "import JSDoc": {
    "scope": "javascript,javascriptreact",
    "prefix": ["impjd", "importJSDoc"],
    "body": "import('${1:path}').$0"
  },
  "require": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["req", "require"],
    "body": "const ${2:module} = require('${1:path}');"
  },
  // Exports
  "export from": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["efr", "exportFrom"],
    "body": ["export {$2} from '${1:module}';"]
  },
  "export default from": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["edfr", "exportDefaultFrom"],
    "body": ["export { default as ${2:name} } from '${1:module}';"]
  },
  "export default": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ed", "exportDefault"],
    "body": ["export default $1;"]
  },
  "export * from": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["e*fr", "exportAllFrom"],
    "body": ["export * from '$1';"]
  },
  "export * as ns": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["e*", "exportAll"],
    "body": ["export * as ${0:ns} from '$1';"]
  },
  "export const": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ec", "exportConst"],
    "body": "export const ${1:name} = $2;"
  },
  "export const object destructuring": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ecod",
    "body": "export const {$2} = ${1:object};"
  },
  "export default const": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["edc", "exportDefaultConst"],
    "body": ["const ${1:$TM_FILENAME_BASE} = $0;\n", "export default $1;"]
  },
  "export function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ef",
    "body": "export function ${1:name}($2) {$0}"
  },
  "export default function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "edf",
    "body": "export default function ${1:$TM_FILENAME_BASE}($2) {$0}"
  },
  "export function expression": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "efe",
    "body": "export const ${1:name} = ($2) => {$0};"
  },
  "export default function expression": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "edfe",
    "body": [
      "const ${1:$TM_FILENAME_BASE} = ($2) => {$0};\n",
      "export default $1;\n"
    ]
  },
  "export generator function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "egf",
    "body": "export function* ${1:name}($2) {$0}"
  },
  "export default generator function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "edgf",
    "body": "export default function* ${1:name}($2) {$0}"
  },
  "export async function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "eaf",
    "body": "export async function ${1:name}($2) {$0}"
  },
  "export default async function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "edaf",
    "body": "export default async function ${1:$TM_FILENAME_BASE}($2) {$0}"
  },
  "export async function expression": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "eafe",
    "body": "export const ${1:name} = async ($2) => {$0};\n"
  },
  "export default async function expression": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "edaf",
    "body": [
      "const ${1:$TM_FILENAME_BASE} = async ($2) => {$0};\n",
      "export default $1;\n"
    ]
  },
  "export async generator function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "eagf",
    "body": "export async function* ${1:name}($2) {$0}"
  },
  "export default async generator function": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "edagf",
    "body": "export default async function* ${1:$TM_FILENAME_BASE}($2) {$0}"
  },
  "export class": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "ecl",
    "body": "export class ${1:name} {$0}"
  },
  "export default class": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "edcl",
    "body": "export default class ${1:$TM_FILENAME_BASE} {$0}"
  },
  // Object properties
  "async function property": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "afp",
    "body": ["${1:field}: async ($2) => {$0},"]
  },
  // Class members
  "constructor": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ctor", "constructor"],
    "body": ["constructor($1) {$0}"]
  },
  "class field": {
    "scope": "javascript,javascriptreact",
    "prefix": ["field"],
    "body": ["${1:field} = ($2) => {$0};"]
  },
  "get property": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": ["get"],
    "body": ["get ${1:name}() {", "\treturn this.$2;", "}"]
  },
  "set property": {
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "prefix": ["set"],
    "body": ["set ${1:name}($2) {", "\tthis.$3 = $2;", "}"]
  },
  "get-set": {
    "scope": "javascript,javascriptreact",
    "prefix": ["getset"],
    "body": [
      "get ${1:name}() {",
      "\treturn this.$3;",
      "}\n",
      "set $1($2) {",
      "\tthis.$3 = $2;",
      "}"
    ]
  },
  // Control flow and error handling
  "for loop": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "for",
    "body": ["for (let ${1:i} = ${2:0}; $1 < ${3:count}; ++$1) {", "\t$0", "}"]
  },
  "revert for loop": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "forr",
    "body": [
      "for (let ${1:i} = ${2:startIndex}; $1 >= ${3:0}; --$1) {",
      "\t$0",
      "}"
    ]
  },
  "for of": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "forof",
    "body": ["for (const ${2:iterator} of ${1:iterable}) {", "\t$0", "}"]
  },
  "for await of": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "forawaitof",
    "body": ["for await (const ${2:iterator} of ${1:iterable}) {", "\t$0", "}"]
  },
  "try catch finally": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "trycatchfinally",
    "body": [
      "try {",
      "\t$0",
      "} catch (${1:error}) {",
      "\t",
      "} finally {",
      "\t",
      "}"
    ]
  },
  "try finally": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "tryfinally",
    "body": [
      "try {",
      "\t$0",
      "} finally {",
      "\t",
      "}"
    ]
  },
  // Testing
  "describe": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["d", "describe"],
    "body": ["describe(`${1:testSuite}`, () => {", "\t$0", "});\n"]
  },
  "describe each": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["de", "describeeach"],
    "body": [
      "describe.each<[$1]>([$4])(`${2:testSuite}`, ($3) => {",
      "\t$0",
      "});\n"
    ]
  },
  "test": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["t", "test"],
    "body": ["test(`${1:testCase}`, () => {", "\t$0", "});"]
  },
  "test each": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["te", "testeach"],
    "body": ["test.each(${1:testCases})(`$2`, ($3) => {", "\t$0", "});"]
  },
  "it": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": "it",
    "body": ["it(`${1:testCase}`, () => {", "\t$0", "});"]
  },
  "it each": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ite", "iteach"],
    "body": ["it.each<[$1]>([$4])(`${2:testCase}`, ($3) => {", "\t$0", "});"]
  },
  "it each match snapshot": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["items", "iteachmatchsnapshot"],
    "body": [
      "it.each<[$1]>([$5])(`${2:testCase}`, ${3:input} => {",
      "\texpect(${4:func}($3)).toMatchSnapshot();",
      "});"
    ]
  },
  "test async": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ta", "testasync"],
    "body": ["test(`${1:testCase}`, async () => {", "\t$0", "});"]
  },
  "it async": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ita", "itasync"],
    "body": ["it(`${1:testCase}`, async () => {", "\t$0", "});"]
  },
  "test done": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["td", "testdone"],
    "body": ["test(`${1:testCase}`, done => {", "\t$0", "});"]
  },
  "it done": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["itd", "itdone"],
    "body": ["it(`${1:testCase}`, done => {", "\t$0", "});"]
  },
  "expect": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["e", "expect"],
    "body": ["expect(${1:actual}).$2;"]
  },
  "beforeAll": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ba", "beforeall"],
    "body": ["beforeAll(() => {", "\t$0", "});"]
  },
  "beforeEach": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["be", "beforeeach"],
    "body": ["beforeEach(() => {", "\t$0", "});"]
  },
  "afterAll": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["aa", "afterall"],
    "body": ["afterAll(() => {", "\t$0", "});"]
  },
  "afterEach": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["ae", "aftereach"],
    "body": ["afterEach(() => {", "\t$0", "});"]
  },
  "spy": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["spy"],
    "body": "const ${3}Spy = jest.spyOn(${1:obj}, '${2}');"
  },
  // Utilities
  "setTimeout": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["settimeout"],
    "body": "setTimeout(() => {$0}, ${1:ms});"
  },
  "setTimeout declaration": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["settimeout"],
    "body": "const ${1:timeoutId} = setTimeout(() => {$0}, ${2:ms});"
  },
  "setInterval": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["setinterval"],
    "body": "setInterval(() => {$0}, ${1:ms});"
  },
  "setInterval declaration": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["setinterval"],
    "body": "const ${1:intervalId} = setInterval(() => {$0}, ${2:ms});"
  },
  "setImmediate": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["setimmediate"],
    "body": "setImmediate(() => {$0});"
  },
  // Functions
  "iife": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["iife", "immediatelyInvoked"],
    "body": "(() => {\n\t$0\n})();"
  },
  "iiafe": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["iiafe", "immediatelyInvokedAsync"],
    "body": "(async () => {\n\t$0\n})();"
  },
  // Misc
  "region": {
    "scope": "javascript,typescript,javascriptreact,typescriptreact",
    "prefix": ["region"],
    "body": [
      "///////////////////////////////////////////////////////////",
      "//#region ${1:REGION}",
      "///////////////////////////////////////////////////////////",
      "$0",
      "//#endregion",
      "///////////////////////////////////////////////////////////"
    ]
  }
}
