{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	/////////////////////////////////////////////////////////
	// #propery properties
	/////////////////////////////////////////////////////////
	"app headers": {
		"scope": "cpp",
		"prefix": [
			"appheader",
			"ah"
		],
		"body": [
			"#property copyright \"ICodeMyOwnLife\"",
			"#property link \"https://github.com/ICodeMyOwnLife\"",
			"#property version \"1.00\"",
			"#property description \"${1:$TM_FILENAME_BASE}\"\n$0"
		]
	},
	"copyright": {
		"scope": "cpp",
		"prefix": "copyright",
		"body": [
			"copyright \"${1}\""
		]
	},
	"description": {
		"scope": "cpp",
		"prefix": "description",
		"body": [
			"description \"${1:$TM_FILENAME_BASE}\""
		]
	},
	"indicator_applied_price": {
		"scope": "cpp",
		"prefix": [
			"indicator_applied_price"
		],
		"body": [
			"indicator_applied_price ${1|PRICE_CLOSE,PRICE_OPEN,PRICE_HIGH,PRICE_LOW,PRICE_MEDIAN,PRICE_TYPICAL,PRICE_WEIGHTED|}"
		]
	},
	"indicator_buffers": {
		"scope": "cpp",
		"prefix": [
			"indicator_buffers"
		],
		"body": [
			"indicator_buffers ${1:1}"
		]
	},
	"indicator_chart_window": {
		"scope": "cpp",
		"prefix": [
			"indicator_chart_window",
			"icw"
		],
		"body": [
			"indicator_chart_window"
		]
	},
	"indicator_color": {
		"scope": "cpp",
		"prefix": [
			"indicator_color"
		],
		"body": [
			"indicator_color${1:1} ${2:clrRed}"
		]
	},
	"indicator_height": {
		"scope": "cpp",
		"prefix": [
			"indicator_height"
		],
		"body": [
			"indicator_height ${1:100}"
		]
	},
	"indicator_label": {
		"scope": "cpp",
		"prefix": [
			"indicator_label"
		],
		"body": [
			"indicator_label${1:1} \"${2:Plot 1}\""
		]
	},
	"indicator_level": {
		"scope": "cpp",
		"prefix": [
			"indicator_level"
		],
		"body": [
			"indicator_level${1:1} ${2:10.0}"
		]
	},
	"indicator_levelcolor": {
		"scope": "cpp",
		"prefix": [
			"indicator_levelcolor"
		],
		"body": [
			"indicator_levelcolor${1:1} ${2:clrRed}"
		]
	},
	"indicator_levelstyle": {
		"scope": "cpp",
		"prefix": [
			"indicator_levelstyle"
		],
		"body": [
			"indicator_levelstyle${1:1} ${2|STYLE_SOLID,STYLE_DASH,STYLE_DOT,STYLE_DASHDOT,STYLE_DASHDOTDOT|}"
		]
	},
	"indicator_levelwidth": {
		"scope": "cpp",
		"prefix": [
			"indicator_levelwidth"
		],
		"body": [
			"indicator_levelwidth${1:1} ${2:1}"
		]
	},
	"indicator_maximum": {
		"scope": "cpp",
		"prefix": [
			"indicator_maximum"
		],
		"body": [
			"indicator_maximum ${1:100.0}"
		]
	},
	"indicator_minimum": {
		"scope": "cpp",
		"prefix": [
			"indicator_minimum"
		],
		"body": [
			"indicator_minimum ${1:0.0}"
		]
	},
	"indicator_plots": {
		"scope": "cpp",
		"prefix": [
			"indicator_plots"
		],
		"body": [
			"indicator_plots"
		]
	},
	"indicator_separate_window": {
		"scope": "cpp",
		"prefix": [
			"indicator_separate_window",
			"isw"
		],
		"body": [
			"indicator_separate_window"
		]
	},
	"indicator_style": {
		"scope": "cpp",
		"prefix": [
			"indicator_style"
		],
		"body": [
			"indicator_style${1:1} ${2|STYLE_SOLID,STYLE_DASH,STYLE_DOT,STYLE_DASHDOT,STYLE_DASHDOTDOT|}"
		]
	},
	"indicator_type": {
		"scope": "cpp",
		"prefix": [
			"indicator_type"
		],
		"body": [
			"indicator_type${1:1} ${2|DRAW_LINE,DRAW_NONE,DRAW_SECTION,DRAW_HISTOGRAM,DRAW_HISTOGRAM2,DRAW_ARROW,DRAW_ZIGZAG,DRAW_FILLING,DRAW_BARS,DRAW_CANDLES,DRAW_COLOR_LINE,DRAW_COLOR_SECTION,DRAW_COLOR_HISTOGRAM,DRAW_COLOR_HISTOGRAM2,DRAW_COLOR_ARROW,DRAW_COLOR_ZIGZAG,DRAW_COLOR_BARS,DRAW_COLOR_CANDLES|}"
		]
	},
	"indicator_width": {
		"scope": "cpp",
		"prefix": [
			"indicator_width"
		],
		"body": [
			"indicator_width${1:1} ${2:1}"
		]
	},
	"indicator properties": {
		"scope": "cpp",
		"prefix": [
			"indicator_properties",
			"i"
		],
		"body": [
			"#property ${1|indicator_chart_window,indicator_separate_window|}",
			"#property indicator_buffers ${2:1}",
			"#property indicator_plots ${3:1}"
		]
	},
	"link": {
		"scope": "cpp",
		"prefix": "link",
		"body": [
			"link \"${1}\""
		]
	},
	"plot properties": {
		"scope": "cpp",
		"prefix": [
			"plot_properties",
			"p"
		],
		"body": [
			"#property indicator_label${1:1} \"${2:My Plot}\"",
			"#property indicator_type$1 ${3:DRAW_LINE}",
			"#property indicator_color$1 ${4:clrRed}",
			"#property indicator_style$1 ${5:STYLE_SOLID}",
			"#property indicator_width$1 ${6:2}"
		]
	},
	"plot properties - buy (none)": {
		"scope": "cpp",
		"prefix": [
			"plot_buy_none",
			"pbn"
		],
		"body": [
			"#property indicator_label${1:1} \"Buy signal\"",
			"#property indicator_type$1 DRAW_NONE",
		]
	},
	"plot properties - sell (none)": {
		"scope": "cpp",
		"prefix": [
			"plot_sell_none",
			"psn"
		],
		"body": [
			"#property indicator_label${1:2} \"Sell signal\"",
			"#property indicator_type$1 DRAW_NONE",
		]
	},
	"script_show_confirm": {
		"scope": "cpp",
		"prefix": "script_show_confirm",
		"body": [
			"script_show_confirm"
		]
	},
	"script_show_inputs": {
		"scope": "cpp",
		"prefix": "script_show_inputs",
		"body": [
			"script_show_inputs"
		]
	},
	"version": {
		"scope": "cpp",
		"prefix": "version",
		"body": [
			"version \"${1:1.00}\""
		]
	},
	/////////////////////////////////////////////////////////
	// MQL5 keywords
	/////////////////////////////////////////////////////////
	"case": {
		"scope": "cpp",
		"prefix": [
			"case"
		],
		"body": [
			"case $1:",
			"  $0",
			"break;\n"
		]
	},
	"class": {
		"scope": "cpp",
		"prefix": [
			"class",
			"cls"
		],
		"body": [
			"class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}",
			"{",
			"private:",
			"  $2",
			"public:",
			"  $1($3)$4 {}",
			"  $0",
			"};",
		]
	},
	"define": {
		"scope": "cpp",
		"prefix": [
			"define",
			"d"
		],
		"body": [
			"#define ${1:CONSTANT} ${2:VALUE}$0"
		]
	},
	"enum": {
		"scope": "cpp",
		"prefix": [
			"enum",
			"e"
		],
		"body": [
			"enum ${1:ENUM_NAME}\n{\n  $0\n};\n"
		]
	},
	"for": {
		"scope": "cpp",
		"prefix": [
			"for",
			"forloop"
		],
		"body": [
			"for (${1:int} ${2:i} = ${3:0}; $2 ${4|<,<=|} ${5:count}; ${6:$2++})\n{\n  $0\n}",
		]
	},
	"forr": {
		"scope": "cpp",
		"prefix": [
			"forr",
			"forreverseloop"
		],
		"body": [
			"for (${1:int} ${2:i} = ${3:length - 1}; $2 ${4|>=,>|} ${5:0}; ${6:$2--})\n{\n  $0\n}",
		]
	},
	"function": {
		"scope": "cpp",
		"prefix": [
			"function",
			"f"
		],
		"body": [
			"${1:void} ${2:Function_Name}($3)\n{\n  $0\n}\n"
		]
	},
	"if": {
		"scope": "cpp",
		"prefix": [
			"if"
		],
		"body": [
			"if (${1:${CLIPBOARD}})",
			"{ ",
			"  $0",
			"}",
		]
	},
	"method": {
		"scope": "cpp",
		"prefix": [
			"method",
			"m"
		],
		"body": [
			"${1:void} ${2:Method_Name}($3)${4:;}$0"
		]
	},
	"method, static": {
		"scope": "cpp",
		"prefix": [
			"static_method",
			"sm"
		],
		"body": [
			"static ${1:void} ${2:Method_Name}($3)${4:;}$0"
		]
	},
	"method, virtual": {
		"scope": "cpp",
		"prefix": [
			"virtual_method",
			"vm"
		],
		"body": [
			"virtual ${1:void} ${2:Method_Name}($3)${4:;}$0"
		]
	},
	"variable": {
		"scope": "cpp",
		"prefix": [
			"variable",
			"var",
			"v"
		],
		"body": [
			"${1:int} ${2:name} = ${value};$0"
		]
	},
	"input": {
		"scope": "cpp",
		"prefix": [
			"input",
			"inp"
		],
		"body": [
			"input ${1:int} ${2:input_name} = ${3:value}; // $0"
		]
	},
	"custom EA": {
		"scope": "cpp",
		"prefix": [
			"customea",
			"cea"
		],
		"body": [
			"class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} : public CustomEa",
			"{",
			"private:",
			"  $3\n",
			"public:",
			"  $1() : CustomEa($4) {}\n",
			"  int OnInitialize() override",
			"  {",
			"    $11\n",
			"    return INIT_SUCCEEDED;",
			"  }\n",
			"  void OnNewBar() override",
			"  {",
			"    $21",
			"  }",
			"};\n",
			"$1 ${2:my_ea};\n",
			"int OnInit() { return $2.OnInit(); }\n",
			"double OnTester() { $101 }\n",
			"void OnTick() { $2.OnTick(); }",
		]
	},
	/////////////////////////////////////////////////////////
	// IndicatorImpl implementation
	/////////////////////////////////////////////////////////
	"indicator impl 1": {
		"scope": "cpp",
		"prefix": [
			"indicator_impl_1",
			"ii1"
		],
		"body": [
			"#include <../Libraries/IndicatorImpl.mqh>\n",
			"class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} : public ${2|IndicatorImpl1,ColorIndicatorImpl1|}",
			"{",
			"private:",
			"  $3\n",
			"public:",
			"  $1($4)$5 {}\n",
			"  double Calculate(",
			"      const int rates_total, const int prev_calculated, const int index,",
			"      const int begin, const double &price[], const double &buffer[]) override",
			"  {",
			"    $6return 0.0;",
			"  }\n",
			"  int DrawBegin(const int begin) override { $7return begin; }\n",
			"  double Initialize(const int rates_total, const int begin,",
			"               const int draw_begin, const double &price[]) override",
			"  {",
			"    $0return Calculate(draw_begin, price);",
			"  }",
			"};",
		]
	},
	"indicator impl 2": {
		"scope": "cpp",
		"prefix": [
			"indicator_impl_2",
			"ii2"
		],
		"body": [
			"#include <../Libraries/IndicatorImpl.mqh>\n",
			"class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} : public ${2|IndicatorImpl2,ColorIndicatorImpl2|}",
			"{",
			"private:",
			"  $3\n",
			"public:",
			"  $1($4)$5 {}\n",
			"  double Calculate(",
			"      const int rates_total, const int prev_calculated, const int index,",
			"      const datetime &time[], const double &open[], const double &high[],",
			"      const double &low[], const double &close[], const long &tick_volume[],",
			"      const long &volume[], const int &spread[], const double &buffer[]) override",
			"  {",
			"    $6return 0.0;",
			"  }\n",
			"  int DrawBegin() override { $7return 0; }\n",
			"  double InitData(",
			"      const int rates_total, const int draw_begin, const datetime &time[],",
			"      const double &open[], const double &high[], const double &low[],",
			"      const double &close[], const long &tick_volume[], const long &volume[],",
			"      const int &spread[]) override",
			"  {",
			"    $0return Calculate(draw_begin, open, high, low, close);",
			"  }",
			"};",
		]
	},
	/////////////////////////////////////////////////////////
	// CustomIndicator implementation
	/////////////////////////////////////////////////////////
	"custom indicator 1": {
		"scope": "cpp",
		"prefix": [
			"custom_indicator_1",
			"ci1"
		],
		"body": [
			"class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}",
			"{",
			"private:",
			"  $3\n",
			"public:",
			"  int OnInit()",
			"  {",
			"    $11\n",
			"    return INIT_SUCCEEDED;",
			"  }\n",
			"  int OnCalculate(const int rates_total, const int prev_calculated,",
			"                  const datetime &time[], const double &open[],",
			"                  const double &high[], const double &low[],",
			"                  const double &close[], const long &tick_volume[],",
			"                  const long &volume[], const int &spread[])",
			"  { ",
			"    $21",
			"    return rates_total;",
			"  }",
			"};\n",
			"$1 ${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}};\n",
			"int OnInit() { return $2.OnInit(); }\n",
			"int OnCalculate(const int rates_total, const int prev_calculated,",
			"                const datetime &time[], const double &open[],",
			"                const double &high[], const double &low[],",
			"                const double &close[], const long &tick_volume[],",
			"                const long &volume[], const int &spread[])",
			"{",
			"  return $2.OnCalculate(rates_total, prev_calculated, time,",
			"                        open, high, low, close, tick_volume, volume, spread);",
			"}"
		],
	},
	"custom indicator 2": {
		"scope": "cpp",
		"prefix": [
			"custom_indicator_2",
			"ci2"
		],
		"body": [
			"class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}",
			"{",
			"private:",
			"  $3\n",
			"public:",
			"  int OnInit()",
			"  {",
			"    $11\n",
			"    return INIT_SUCCEEDED;",
			"  }\n",
			"  int OnCalculate(const int rates_total, const int prev_calculated,",
			"                  const int begin, const double &price[])",
			"  {",
			"    $21",
			"    return rates_total;",
			"  }",
			"};\n",
			"$1 ${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}};\n",
			"int OnInit() { return $2.OnInit(); }\n",
			"int OnCalculate(const int rates_total, const int prev_calculated,",
			"                const int begin, const double &price[])",
			"{",
			"  return $2.OnCalculate(rates_total, prev_calculated, begin, price);",
			"}"
		],
	},
	"custom indicator: OnCalculate 1": {
		"scope": "cpp",
		"prefix": [
			"customindicator:oncalculate1",
			"ci:oc1",
			"signalindicator:oncalculate",
			"si:oc",
		],
		"body": [
			"int OnCalculate(const int rates_total, const int prev_calculated,",
			"                const datetime &time[], const double &open[],",
			"                const double &high[], const double &low[],",
			"                const double &close[], const long &tick_volume[],",
			"                const long &volume[], const int &spread[])",
			"{ ",
			"  $0",
			"  return rates_total;",
			"}",
		]
	},
	"custom indicator: OnCalculate 2": {
		"scope": "cpp",
		"prefix": [
			"customindicator:oncalculate2",
			"ci:oc2",
		],
		"body": [
			"int OnCalculate(const int rates_total, const int prev_calculated,",
			"                const int begin, const double &price[])",
			"{",
			"  $0",
			"  return rates_total;",
			"}",
		]
	},
	"custom indicator: OnChartEvent": {
		"scope": "cpp",
		"prefix": [
			"customindicator:onchartevent",
			"ci:oce",
			"signalindicator:onchartevent",
			"si:oce"
		],
		"body": [
			"void OnChartEvent(const int id, const long &lparam,",
			"                  const double &dparam, const string &sparam)",
			"{",
			"  $0",
			"}"
		]
	},
	"custom indicator: OnDeinit": {
		"scope": "cpp",
		"prefix": [
			"customindicator:ondeinit",
			"ci:od",
			"signalindicator:ondeinit",
			"si:od",
		],
		"body": [
			"void OnDeinit(const int reason) { $0 }"
		]
	},
	"custom indicator: OnInit": {
		"scope": "cpp",
		"prefix": [
			"customindicator:oninit",
			"ci:oi",
			"signalindicator:oninit",
			"si:oi",
		],
		"body": [
			"int OnInit()",
			"{",
			"  $0",
			"  return INIT_SUCCEEDED;",
			"}",
		]
	},
	/////////////////////////////////////////////////////////
	// SignalIndicator implementation
	/////////////////////////////////////////////////////////
	"signal indicator": {
		"scope": "cpp",
		"prefix": [
			"signal_indicator",
			"si"
		],
		"body": [
			"class ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} : public SignalIndicator",
			"{",
			"private:",
			"  int ${3:_ma_handle};",
			"  double ${4:_ma_data[]}, _buy_data[], _sell_data[];\n",
			"protected:",
			"  bool FillData(const int rates_total, const int prev_calculated,",
			"                const datetime &time[], const double &open[],",
			"                const double &high[], const double &low[],",
			"                const double &close[], const long &tick_volume[],",
			"                const long &volume[], const int &spread[]) override",
			"  {",
			"    return $11",
			"  }\n",
			"  void InitData(const int rates_total, const int prev_calculated,",
			"                const datetime &time[], const double &open[],",
			"                const double &high[], const double &low[],",
			"                const double &close[], const long &tick_volume[],",
			"                const long &volume[], const int &spread[]) override",
			"  {",
			"    ${21:ArrayInitialize(_buy_data, EMPTY_VALUE);\nArrayInitialize(_sell_data, EMPTY_VALUE);}",
			"  }\n",
			"  void OnIterate(const int index, const int rates_total, const int prev_calculated,",
			"                 const datetime &time[], const double &open[],",
			"                 const double &high[], const double &low[],",
			"                 const double &close[], const long &tick_volume[],",
			"                 const long &volume[], const int &spread[]) override",
			"  {",
			"    ${41:_buy_data[index] = _sell_data[index] = EMPTY_VALUE;}\n$42",
			"  }\n",
			"public:",
			"  $1() : SignalIndicator($5) {}\n",
			"  int $1::OnInit()",
			"  {",
			"    ${31:SetIndexBuffer(0, _buy_data, INDICATOR_DATA);\nPlotIndexSetDouble(0, PLOT_EMPTY_VALUE, EMPTY_VALUE);\n\nSetIndexBuffer(1, _sell_data, INDICATOR_DATA);\nPlotIndexSetDouble(1, PLOT_EMPTY_VALUE, EMPTY_VALUE);}\n\n$32",
			"    return INIT_SUCCEEDED;",
			"  }",
			"};\n",
			"$1 ${2:${TM_FILENAME_BASE/(.*)/${1:/downcase}/}};\n",
			"int OnInit() { return $2.OnInit(); }\n",
			"int OnCalculate(const int rates_total, const int prev_calculated,",
			"                const datetime &time[], const double &open[],",
			"                const double &high[], const double &low[],",
			"                const double &close[], const long &tick_volume[],",
			"                const long &volume[], const int &spread[])",
			"{",
			"  return $2.OnCalculate(rates_total, prev_calculated, time,",
			"                        open, high, low, close, tick_volume, volume, spread);",
			"}"
		],
	},
	"signal indicator: FillData": {
		"scope": "cpp",
		"prefix": [
			"signalindicator:filldata",
			"si:fd",
		],
		"body": [
			"bool FillData(const int rates_total, const int prev_calculated,",
			"              const datetime &time[], const double &open[],",
			"              const double &high[], const double &low[],",
			"              const double &close[], const long &tick_volume[],",
			"              const long &volume[], const int &spread[]) override",
			"{",
			"  return $0",
			"}",
		]
	},
	"signal indicator: InitData": {
		"scope": "cpp",
		"prefix": [
			"signalindicator:initdata",
			"si:id",
		],
		"body": [
			"void InitData(const int rates_total, const int prev_calculated,",
			"              const datetime &time[], const double &open[],",
			"              const double &high[], const double &low[],",
			"              const double &close[], const long &tick_volume[],",
			"              const long &volume[], const int &spread[]) override",
			"{",
			"  ${1:ArrayInitialize(_buy_data, EMPTY_VALUE);\nArrayInitialize(_sell_data, EMPTY_VALUE);}$0",
			"}",
		]
	},
	"signal indicator: OnIterate": {
		"scope": "cpp",
		"prefix": [
			"signalindicator:oniterate",
			"si:oniter",
		],
		"body": [
			"void OnIterate(const int index, const int rates_total, const int prev_calculated,",
			"               const datetime &time[], const double &open[],",
			"               const double &high[], const double &low[],",
			"               const double &close[], const long &tick_volume[],",
			"               const long &volume[], const int &spread[]) override",
			"{",
			"  ${1:_buy_data[index] = _sell_data[index] = EMPTY_VALUE;}$0",
			"}",
		]
	},
	/////////////////////////////////////////////////////////
	// Technical indicator functions
	/////////////////////////////////////////////////////////
	"iCustom": {
		"scope": "cpp",
		"prefix": [
			"icustom"
		],
		"body": [
			"iCustom(${1:symbol}, ${2:period}, \"${3:name}\"$4)$0"
		]
	},
	/////////////////////////////////////////////////////////
	// Custom indicator functions
	/////////////////////////////////////////////////////////
	"PlotIndexGetInteger": {
		"scope": "cpp",
		"prefix": [
			"plotindexgetinteger",
			"pigi"
		],
		"body": [
			"PlotIndexGetInteger(${1:0}, ${2|PLOT_ARROW,PLOT_ARROW_SHIFT,PLOT_DRAW_BEGIN,PLOT_DRAW_TYPE,PLOT_SHOW_DATA,PLOT_SHIFT,PLOT_LINE_STYLE,PLOT_LINE_WIDTH,PLOT_COLOR_INDEXES,PLOT_LINE_COLOR|}$3)$0"
		]
	},
	"IndicatorSetDouble": {
		"scope": "cpp",
		"prefix": [
			"indicatorsetdouble",
			"isd"
		],
		"body": [
			"IndicatorSetDouble(${1|INDICATOR_LEVELVALUE,INDICATOR_MINIMUM,INDICATOR_MAXIMUM|}, $2);$0"
		]
	},
	"IndicatorSetInteger": {
		"scope": "cpp",
		"prefix": [
			"indicatorsetinteger",
			"isi"
		],
		"body": [
			"IndicatorSetInteger(${1|INDICATOR_DIGITS,INDICATOR_HEIGHT,INDICATOR_LEVELS,INDICATOR_LEVELCOLOR,INDICATOR_LEVELSTYLE,INDICATOR_LEVELWIDTH|}, $2);$0"
		]
	},
	"IndicatorSetString": {
		"scope": "cpp",
		"prefix": [
			"indicatorsetstring",
			"iss"
		],
		"body": [
			"IndicatorSetString(${1|INDICATOR_SHORTNAME,INDICATOR_LEVELTEXT|}, $2);$0"
		]
	},
	"PlotIndexSetDouble": {
		"scope": "cpp",
		"prefix": [
			"plotindexsetdouble",
			"pisd"
		],
		"body": [
			"PlotIndexSetDouble(${1:0}, ${2|PLOT_EMPTY_VALUE|}, $3);$0"
		]
	},
	"PlotIndexSetInteger": {
		"scope": "cpp",
		"prefix": [
			"plotindexsetinteger",
			"pisi"
		],
		"body": [
			"PlotIndexSetInteger(${1:0}, ${2|PLOT_ARROW,PLOT_ARROW_SHIFT,PLOT_DRAW_BEGIN,PLOT_DRAW_TYPE,PLOT_SHOW_DATA,PLOT_SHIFT,PLOT_LINE_STYLE,PLOT_LINE_WIDTH,PLOT_COLOR_INDEXES,PLOT_LINE_COLOR|}, $3);$0"
		]
	},
	"PlotIndexSetString": {
		"scope": "cpp",
		"prefix": [
			"plotindexsetstring",
			"piss"
		],
		"body": [
			"PlotIndexSetString(${1:0}, ${2|PLOT_LABEL|}, $3);$0"
		]
	},
	"SetIndexBuffer": {
		"scope": "cpp",
		"prefix": [
			"setindexbuffer",
			"sib"
		],
		"body": [
			"SetIndexBuffer(${1:0}, ${2:buffer}, ${3|INDICATOR_DATA,INDICATOR_COLOR_INDEX,INDICATOR_CALCULATIONS|});$0"
		]
	},
	/////////////////////////////////////////////////////////
	// Custom/Signal indicator helpers
	/////////////////////////////////////////////////////////
	"AddSubIndicator": {
		"scope": "cpp",
		"prefix": [
			"addsubindicator",
			"asi"
		],
		"body": [
			"AddSubIndicator(${1:ind_name}, ${2:ind_handle}, ${3|POS_MAIN_WINDOW,POS_CURR_WINDOW,POS_NEW_WINDOW|})$0"
		]
	},
	"FillIndicatorData": {
		"scope": "cpp",
		"prefix": [
			"fillindicatordata",
			"fid"
		],
		"body": [
			"${1|IndicatorUtil::FillIndicatorData,IU::FillIndicatorData|}(${2:rates_total}, ${3:prev_calculated}, ${4:ind_handle}, ${5:ind_data}, \"${6:Ind Name}\"$7)$0"
		]
	},
	/////////////////////////////////////////////////////////
	// Misc
	/////////////////////////////////////////////////////////
	"header": {
		"scope": "cpp",
		"prefix": [
			"header",
			"h"
		],
		"body": [
			"//+------------------------------------------------------------------+",
			"//|                                              $2${1:$TM_FILENAME} |",
			"//|                                                   ICodeMyOwnLife |",
			"//|                                https://github.com/ICodeMyOwnLife |",
			"//+------------------------------------------------------------------+",
		]
	},
}