{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  // Declarations
  "declare const": {
    "scope": "typescript,typescriptreact",
    "prefix": ["dc", "declareConst"],
    "body": "declare const ${1:name}: $0;"
  },
  "declare let": {
    "scope": "typescript,typescriptreact",
    "prefix": ["dl", "declareLet"],
    "body": "declare let ${1:name}: $0;"
  },
  "declare var": {
    "scope": "typescript,typescriptreact",
    "prefix": ["dv", "declareVar"],
    "body": "declare var ${1:name}: $0;"
  },
  "declare function": {
    "scope": "typescript,typescriptreact",
    "prefix": ["df", "declareFunction"],
    "body": "declare function ${1:name}($2): $3;$0"
  },
  "declare function expression": {
    "scope": "typescript,typescriptreact",
    "prefix": ["dfe", "declareFunctionExpression"],
    "body": "declare const ${1:name}: ($2) => $3;$0"
  },
  "declare enum": {
    "scope": "typescript,typescriptreact",
    "prefix": ["de", "declareEnum"],
    "body": "declare enum ${1:name} {\n\t$0\n}\n"
  },
  "declare const enum": {
    "scope": "typescript,typescriptreact",
    "prefix": ["dce", "declareConstEnum"],
    "body": "declare const enum ${1:name} {\n\t$0\n}\n"
  },
  "declare interface": {
    "scope": "typescript,typescriptreact",
    "prefix": ["di", "declareInterface"],
    "body": "declare interface ${1:name} {\n\t$0\n}\n"
  },
  "declare class": {
    "scope": "typescript,typescriptreact",
    "prefix": ["dcl", "declareClass"],
    "body": "declare class ${1:name} {\n\t$0\n}\n"
  },
  "declare namespace": {
    "scope": "typescript,typescriptreact",
    "prefix": ["dns", "declareNamespace"],
    "body": "declare namespace ${1:name} {\n\t$0\n}\n"
  },
  "declare module": {
    "scope": "typescript,typescriptreact",
    "prefix": ["dm", "declareModule"],
    "body": "declare module '${1:name}' {\n\t$0\n}\n"
  },
  "declare global": {
    "scope": "typescript,typescriptreact",
    "prefix": ["dg", "declareGlobal"],
    "body": "declare global {\n\t$0\n}\n"
  },
  "enum": {
    "scope": "typescript,typescriptreact",
    "prefix": ["enum"],
    "body": "enum ${1:name} {\n\t$0\n}\n"
  },
  "const enum": {
    "scope": "typescript,typescriptreact",
    "prefix": ["constEnum"],
    "body": "const enum ${1:name} {\n\t$0\n}\n"
  },
  "interface": {
    "scope": "typescript,typescriptreact",
    "prefix": ["interface"],
    "body": "interface ${1:Name} {$2}"
  },
  "namespace": {
    "scope": "typescript,typescriptreact",
    "prefix": ["ns", "namespace"],
    "body": "namespace ${1:Name} {\n\t$0\n}\n"
  },
  // Imports
  "import type": {
    "scope": "typescript,typescriptreact",
    "prefix": ["it", "importType"],
    "body": "import type ${0:Name} from '$1';"
  },
  "import type destructuring": {
    "scope": "typescript,typescriptreact",
    "prefix": ["itd", "importTypeDestructuring"],
    "body": "import type {$0} from '$1';"
  },
  // Exports
  "export enum": {
    "scope": "typescript,typescriptreact",
    "prefix": ["ee", "exportEnum"],
    "body": "export enum ${1:name} {\n\t$0\n}\n"
  },
  "export interface": {
    "scope": "typescript,typescriptreact",
    "prefix": ["ei", "exportInterface"],
    "body": "export interface ${1:Name} {$2}"
  },
  "export type": {
    "scope": "typescript,typescriptreact",
    "prefix": ["et", "exportType"],
    "body": "export type ${1:Name} = $0;"
  },
  "export type destructuring": {
    "scope": "typescript,typescriptreact",
    "prefix": ["etd", "exportTypeDestructuring"],
    "body": "export type {$0} from '$1';"
  },
  "export string": {
    "scope": "typescript,typescriptreact",
    "prefix": ["estr", "exportString"],
    "body": [
      "export const ${1:name} = `$2$1`;",
      "export type $1 = typeof $1;\n"
    ]
  },
  "export namespace": {
    "scope": "typescript,typescriptreact",
    "prefix": ["ens", "exportNamespace"],
    "body": ["export namespace ${1:Name} {\n\t$0\n}\n"]
  },
  "export declare const": {
    "scope": "typescript,typescriptreact",
    "prefix": ["exdc", "exportDeclareConst"],
    "body": "export declare const ${1:name}: $0;"
  },
  "export declare function": {
    "scope": "typescript,typescriptreact",
    "prefix": ["exdf", "exportDeclareFunction"],
    "body": "export declare function ${1:name}($2): $3;"
  },
  "export declare enum": {
    "scope": "typescript,typescriptreact",
    "prefix": ["exde", "exportDeclareEnum"],
    "body": "export declare enum ${1:name} {\n\t$0\n}\n"
  },
  "export declare const enum": {
    "scope": "typescript,typescriptreact",
    "prefix": ["exdce", "exportDeclareConstEnum"],
    "body": "export declare const enum ${1:name} {\n\t$0\n}\n"
  },
  "export declare interface": {
    "scope": "typescript,typescriptreact",
    "prefix": ["exdi", "exportDeclareInterface"],
    "body": "export declare interface ${1:name} {\n\t$0\n}\n"
  },
  "export declare class": {
    "scope": "typescript,typescriptreact",
    "prefix": ["exdcl", "exportDeclareClass"],
    "body": "export declare class ${1:name} {\n\t$0\n}\n"
  },
  "export declare namespace": {
    "scope": "typescript,typescriptreact",
    "prefix": ["exdns", "exportDeclareNamespace"],
    "body": "export declare namespace ${1:name} {\n\t$0\n}\n"
  },
  // Class members
  "get-set": {
    "scope": "typescript,typescriptreact",
    "prefix": ["getSet"],
    "body": [
      "private _$1: $3 = $4;\n",
      "get ${1:name}() {",
      "\treturn this._$1;",
      "}\n",
      "set $1(${2:value}: ${3:type}) {",
      "\tthis._$1 = $2;",
      "}"
    ]
  },
  "public method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["publicMethod"],
    "body": ["${1:methodName}($2) {", "\t$0", "}"]
  },
  "public async method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["publicAsyncMethod"],
    "body": ["async ${1:methodName}($2) {", "\t$0", "}"]
  },
  "private method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["privateMethod"],
    "body": ["private ${1:methodName}($2) {", "\t$0", "}"]
  },
  "private async method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["privateAsyncMethod"],
    "body": ["private async ${1:methodName}($2) {", "\t$0", "}"]
  },
  "protected method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["protectedMethod"],
    "body": ["protected ${1:methodName}($2) {", "\t$0", "}"]
  },
  "protected async method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["protectedAsyncMethod"],
    "body": ["protected async ${1:methodName}($2) {", "\t$0", "}"]
  },
  "class field": {
    "scope": "typescript,typescriptreact",
    "prefix": ["field"],
    "body": ["private readonly ${1:field} = ($2) => {", "\t$0", "};"]
  },
  "external method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["externalMethod"],
    "body": ["export function ${1:methodName}(this: $2) {", "\t$0", "}"]
  }
}
