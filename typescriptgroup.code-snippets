{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  // Declarations
  "My enum": {
    "scope": "typescript,typescriptreact",
    "prefix": ["enum"],
    "body": "enum ${1:name} {\n\t$0\n}\n"
  },
  "My const enum": {
    "scope": "typescript,typescriptreact",
    "prefix": ["constEnum"],
    "body": "const enum ${1:name} {\n\t$0\n}\n"
  },
  // Exports
  "My export interface": {
    "scope": "typescript,typescriptreact",
    "prefix": ["ei", "exportInterface"],
    "body": "export interface ${1:name} {$2}"
  },
  "My export type": {
    "scope": "typescript,typescriptreact",
    "prefix": ["et", "exportType"],
    "body": "export type ${1:name} = $0;"
  },
  "My export string": {
    "scope": "typescript,typescriptreact",
    "prefix": ["estr", "exportString"],
    "body": [
      "export const ${1:name} = `$2$1`;",
      "export type $1 = typeof $1;\n"
    ]
  },
  // Class members
  "My get property": {
    "scope": "typescript,typescriptreact",
    "prefix": ["get"],
    "body": ["public get ${1:name}() {", "\t$0", "}"]
  },
  "My set property": {
    "scope": "typescript,typescriptreact",
    "prefix": ["set"],
    "body": [
      "public set ${1:name}(${2:value}: ${3:Type}) {",
      "\tthis.$4 = $2;",
      "}"
    ]
  },
  "My get-set": {
    "scope": "typescript,typescriptreact",
    "prefix": ["getSet"],
    "body": [
      "private _$1: $3 = $4;\n",
      "public get ${1:name}() {",
      "\treturn this._$1;",
      "}\n",
      "public set $1(${2:value}: ${3:type}) {",
      "\tthis._$1 = $2;",
      "}"
    ]
  },
  "My public method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["publicMethod"],
    "body": ["public ${1:method}($2) {", "\t$0", "}"]
  },
  "My public async method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["publicAsyncMethod"],
    "body": ["public async ${1:method}($2) {", "\t$0", "}"]
  },
  "My private method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["privateMethod"],
    "body": ["private ${1:method}($2) {", "\t$0", "}"]
  },
  "My private async method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["privateAsyncMethod"],
    "body": ["private async ${1:method}($2) {", "\t$0", "}"]
  },
  "My protected method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["protectedMethod"],
    "body": ["protected ${1:method}($2) {", "\t$0", "}"]
  },
  "My protected async method": {
    "scope": "typescript,typescriptreact",
    "prefix": ["protectedAsyncMethod"],
    "body": ["protected async ${1:method}($2) {", "\t$0", "}"]
  },
  "My class field": {
    "scope": "typescript,typescriptreact",
    "prefix": ["field"],
    "body": ["private readonly ${1:field} = ($2) => {", "\t$0", "};"]
  },
  // Redux
  "My redux action": {
    "scope": "typescript,typescriptreact",
    "prefix": ["action"],
    "body": [
      "export const ${1:ACTION} = '$2$1';",
      "export type $1 = typeof $1;"
    ]
  }
}
