{
  // Declarations
  "const": {
    "prefix": ["c", "constant"],
    "body": ["${1|const,pub const|} ${2:MY_CONSTANT}: $3 = $4;$0"],
    "description": "const"
  },
  "function": {
    "prefix": ["f", "function"],
    "body": ["${1|fn,pub fn|} ${2:my_function}($3) -> $4 {", "    $0", "}"],
    "description": "function"
  },
  "function declaration": {
    "prefix": ["fd", "functionDeclaration"],
    "body": ["${1|fn,pub fn|} ${2:my_function}($3) -> $4;$0"],
    "description": "function declaration"
  },
  "method": {
    "prefix": ["m", "method"],
    "body": ["fn ${1:my_method}(&self, $2) -> $3 {", "    $0", "}"],
    "description": "method"
  },
  "method declaration": {
    "prefix": ["md", "methodDeclaration"],
    "body": ["fn ${1:my_method}(&self, $2) -> $3;$0"],
    "description": "method declaration"
  },
  "public method": {
    "prefix": ["pm", "publicMethod"],
    "body": ["pub fn ${1:my_method}(&self, $2) -> $3 {", "    $0", "}"],
    "description": "public method"
  },
  "void method": {
    "prefix": ["vm", "voidMethod"],
    "body": ["fn ${1:my_function}(&self, $2) {", "    $0", "}"],
    "description": "void method"
  },
  "void method declaration": {
    "prefix": ["vmd", "voidMethodDeclaration"],
    "body": ["fn ${1:my_function}(&self, $2);$0"],
    "description": "void method"
  },
  "public void method": {
    "prefix": ["pvm", "publicVoidMethod"],
    "body": ["pub fn ${1:my_function}(&self, $2) {", "    $0", "}"],
    "description": "public void method"
  },
  "let": {
    "prefix": ["l", "let"],
    "body": ["let ${1:my_variable} = $2;$0"],
    "description": "let"
  },
  "let mut": {
    "prefix": ["lm", "letMut"],
    "body": ["let mut ${1:my_variable} = $2;$0"],
    "description": "let mut"
  },
  "let if else": {
    "prefix": ["lie", "letIfElse"],
    "body": ["let ${1:my_variable} = if $2 { $3 } else { $4 };$0"],
    "description": "let ternary"
  },
  "let mut if else": {
    "prefix": ["lmie", "letMutIfElse"],
    "body": ["let mut ${1:my_variable} = if $2 { $3 } else { $4 };$0"],
    "description": "let mut ternary variable"
  },
  "let match": {
    "prefix": ["letMatch"],
    "body": ["let ${1:my_variable} = match $2 {", "    $3 => $4,$5", "};$0"],
    "description": "let match"
  },
  "let mut match": {
    "prefix": ["letMutMatch"],
    "body": [
      "let mut ${1:my_variable} = match $2 {",
      "    $3 => $4,$5",
      "};$0"
    ],
    "description": "let mut match"
  },
  "let destructuring": {
    "prefix": ["ld", "letDestructuring"],
    "body": ["let ($2) = $1;$0"],
    "description": "let destructuring"
  },
  "enum": {
    "prefix": ["e", "enum"],
    "body": ["enum ${1:MyEnum} {", "    $0", "}"],
    "description": "enum"
  },
  "public enum": {
    "prefix": ["pe", "publicEnum"],
    "body": ["pub enum ${1:MyEnum} {", "    $0", "}"],
    "description": "public enum"
  },
  "module": {
    "prefix": ["m", "module"],
    "body": ["mod ${1:my_module} {", "    $0", "}"],
    "description": "module"
  },
  "public module": {
    "prefix": ["pm", "publicModule"],
    "body": ["pub mod ${1:my_module} {", "    $0", "}"],
    "description": "public module"
  },
  "module declaration": {
    "prefix": ["md", "moduleDeclaration"],
    "body": ["mod ${1:my_module};$0"],
    "description": "module declaration"
  },
  "public module declaration": {
    "prefix": ["pmd", "publicModuleDeclaration"],
    "body": ["pub mod ${1:my_module};$0"],
    "description": "public module declaration"
  },
  "struct": {
    "prefix": ["s"],
    "body": ["struct ${1:MyStruct} {", "    $2: $3,$0", "}"],
    "description": "struct"
  },
  "public struct": {
    "prefix": ["ps", "publicStruct"],
    "body": ["pub struct ${1:MyStruct} {", "    $2: $3,$0", "}"],
    "description": "public struct"
  },
  "impl struct": {
    "prefix": ["is", "implStruct"],
    "body": [
      "impl ${1:MyStruct} {",
      "    pub fn new($2) -> $1 {",
      "        $0",
      "    }",
      "}"
    ],
    "description": "impl struct"
  },
  "tuple struct": {
    "prefix": ["ts", "tupleStruct"],
    "body": ["struct ${1:MyStruct} ($2);$0"],
    "description": "tuple struct"
  },
  "public tuple struct": {
    "prefix": ["pts", "publicTupleStruct"],
    "body": ["pub struct ${1:MyStruct} ($2);$0"],
    "description": "public tuple struct"
  },
  "trait": {
    "prefix": ["tr", "trait"],
    "body": ["trait ${1:MyTrait} {", "    $0", "}"],
    "description": "trait"
  },
  "public trait": {
    "prefix": ["pt", "publicTrait"],
    "body": ["Public trait ${1:MyTrait} {", "    $0", "}"],
    "description": "public trait"
  },
  "impl trait": {
    "prefix": ["it", "implTrait"],
    "body": ["impl ${1:MyTrait} for ${2:MyStruct} {", "    $0", "}"],
    "description": "impl trait"
  },
  // Control Flows
  "if": {
    "prefix": ["if"],
    "body": ["if $1 {", "    $0", "}"],
    "description": "if clause"
  },
  "else": {
    "prefix": ["else"],
    "body": ["else {", "    $0", "}"],
    "description": "else clause"
  },
  "if else": {
    "prefix": ["ifElse"],
    "body": ["if $1 {", "    $2", "} else {", "    $0", "}"],
    "description": "if else"
  },
  "if let": {
    "prefix": ["ifLet"],
    "body": ["if let $1 = $2 {", "    $0", "}"],
    "description": "if let"
  },
  "if let else": {
    "prefix": ["ifLetElse"],
    "body": ["if let $1 = $2 {", "    $3", "} else {", "    $0", "}"],
    "description": "if let else"
  },
  "match": {
    "prefix": ["match"],
    "body": ["match $1 {", "    $2 => {", "        $3", "    }$0", "};"],
    "description": "match"
  },
  "for": {
    "prefix": ["for"],
    "body": ["for ${1:i} in ${2:list} {", "    $0", "}"],
    "description": "for"
  },
  "loop": {
    "prefix": ["loop"],
    "body": ["loop {", "    $0", "}"],
    "description": "loop"
  },
  "while": {
    "prefix": ["while"],
    "body": ["while $1 {", "    $0", "}"],
    "description": "while"
  },
  // Macros
  "assert": {
    "prefix": ["assert"],
    "body": ["assert!($1);$0"],
    "description": "assert macro"
  },
  "assert equal": {
    "prefix": ["assertEq"],
    "body": ["assert_eq!($1, $2);$0"],
    "description": "assert_eq macro"
  },
  "assert not equal": {
    "prefix": ["assertNe"],
    "body": ["assert_ne!($1, $2);$0"],
    "description": "assert_ne macro"
  },
  "format": {
    "prefix": ["format"],
    "body": ["format!(\"$1\", $2);$0"],
    "description": "format macro"
  },
  "format declaration": {
    "prefix": ["formatDeclaration"],
    "body": ["let ${1:my_string} = format!(\"$1\", $2);$0"],
    "description": "format declaration"
  },
  "log": {
    "prefix": ["log"],
    "body": ["log!(\"$1\", $2);$0"],
    "description": "log macro"
  },
  "panic": {
    "prefix": ["panic"],
    "body": ["panic!(\"$1\");$0"],
    "description": "panic macro"
  },
  "println": {
    "prefix": ["println"],
    "body": ["println!(\"$1\", $2);$0"],
    "description": "println macro"
  },
  "eprintln": {
    "prefix": ["eprintln"],
    "body": ["eprintln!(\"$1\", $2);$0"],
    "description": "eprintln macro"
  },
  "vec": {
    "prefix": ["vec"],
    "body": ["vec!([$0])"],
    "description": "vec macro"
  },
  "write": {
    "prefix": ["write"],
    "body": ["write!(${1:f}, \"$2\", $3);$0"],
    "description": "write macro"
  },
  "macro_rules log": {
    "prefix": ["macroRulesLog"],
    "body": [
      "macro_rules! log {",
      "    ( \\$( \\$t:tt )* ) => {",
      "        web_sys::console::log_1(&format!( \\$( \\$t )* ).into());",
      "    }",
      "}"
    ],
    "description": "macro_rules! log"
  },
  // Packages
  "use": {
    "prefix": ["u", "use"],
    "body": ["use $1;$0"],
    "description": "use"
  },
  "public use": {
    "prefix": ["pu", "publicUse"],
    "body": ["pub use $1;$0"],
    "description": "pub use"
  },
  "extern crate": {
    "prefix": ["externCrate"],
    "body": ["extern crate $1;$0"],
    "description": "extern crate"
  },
  // Attributes
  "cfg": {
    "prefix": ["cfg"],
    "body": ["#[cfg($1)]$0"],
    "description": "cfg attribute"
  },
  "derive": {
    "prefix": ["derive"],
    "body": ["#[derive($1)]$0"],
    "description": "derive attribute"
  },
  "repr": {
    "prefix": ["repr"],
    "body": ["#[repr($1)]$0"],
    "description": "repr attribute"
  },
  "wasm_bindgen": {
    "prefix": ["wasmBindGen"],
    "body": ["#[wasm_bindgen]"],
    "description": "wasm_bindgen attribute"
  },
  // Tests
  "test module": {
    "prefix": ["tm", "testModule"],
    "body": ["#[cfg(test)]", "mod ${1:tests} {", "    $0", "}"],
    "description": "cfg test attribute"
  },
  "test": {
    "prefix": ["t", "test"],
    "body": ["#[test]", "fn ${1:my_test}() {", "    $0", "}"],
    "description": "test attribute"
  }
}
