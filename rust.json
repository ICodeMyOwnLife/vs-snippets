{
  // Declarations
  "const": {
    "prefix": ["c", "constant"],
    "body": ["${1|const,pub const|} ${2:MY_CONSTANT}: $3 = $4;$0"],
    "description": "const"
  },
  "function": {
    "prefix": ["f", "function"],
    "body": ["${1|fn,pub fn|} ${2:my_function}($3) -> $4 {", "    $0", "}"],
    "description": "function"
  },
  "generic function": {
    "prefix": ["gf", "genericFunction"],
    "body": [
      "${1|fn,pub fn|} ${2:my_function}<${3:T}>($4) -> $5 where $6 {",
      "    $0",
      "}"
    ],
    "description": "function"
  },
  "function declaration": {
    "prefix": ["fd", "functionDeclaration"],
    "body": ["${1|fn,pub fn|} ${2:my_function}($3) -> $4;$0"],
    "description": "function declaration"
  },
  "let": {
    "prefix": ["l", "let"],
    "body": ["${1|let,let mut|} ${2:my_variable}: $3 = $4;$0"],
    "description": "let"
  },
  "method": {
    "prefix": ["m", "method"],
    "body": [
      "${1|fn,pub fn|} ${2:my_method}(${3|&self,&mut self|}, $4) -> $5 {",
      "    $0",
      "}"
    ],
    "description": "method"
  },
  "generic method": {
    "prefix": ["gm", "genericMethod"],
    "body": [
      "${1|fn,pub fn|} ${2:my_method}<${3:T}>(${4|&self,&mut self|}, $5) -> $6 where $7 {",
      "    $0",
      "}"
    ],
    "description": "method"
  },
  "method declaration": {
    "prefix": ["md", "methodDeclaration"],
    "body": [
      "${1|fn,pub fn|} ${2:my_method}(${3|&self,&mut self|}, $4) -> $5;$0"
    ],
    "description": "method declaration"
  },
  "let if else": {
    "prefix": ["lie", "letIfElse"],
    "body": [
      "${1|let,let mut|} ${2:my_variable} = if $3 { $4 } else { $5 };$0"
    ],
    "description": "let ternary"
  },
  "let match": {
    "prefix": ["lm", "letMatch"],
    "body": [
      "${1|let,let mut|} ${2:my_variable} = match $3 {",
      "    $4 => $5,$6",
      "};$0"
    ],
    "description": "let match"
  },
  "let destructuring": {
    "prefix": ["ld", "letDestructuring"],
    "body": ["let ($2) = $1;$0"],
    "description": "let destructuring"
  },
  "enum": {
    "prefix": ["e", "enum"],
    "body": ["${1|enum,pub enum|} ${2:MyEnum} {", "    $0", "}"],
    "description": "enum"
  },
  "module": {
    "prefix": ["mod", "module"],
    "body": ["${1|mod,pub mod|} ${2:my_module} {", "    $0", "}"],
    "description": "module"
  },
  "module declaration": {
    "prefix": ["modDecl", "moduleDeclaration"],
    "body": ["${1|mod,pub mod|} ${2:my_module};$0"],
    "description": "module declaration"
  },
  "static": {
    "prefix": ["static"],
    "body": [
      "${1|static,static mut,pub static,pub static mut|} ${2:MY_STATIC}: $3 = $4;$0"
    ],
    "description": "static"
  },
  "constructor": {
    "prefix": ["ctor", "constructor"],
    "body": [
      "${1|pub fn,fn|} new($3) -> $2 {",
      "    $2 {",
      "        $0",
      "    }",
      "}"
    ],
    "description": "constructor"
  },
  "struct": {
    "prefix": ["s", "struct"],
    "body": ["${1|struct,pub struct|} ${2:MyStruct} {", "    $3: $4,$0", "}"],
    "description": "struct"
  },
  "generic struct": {
    "prefix": ["gs", "genericStruct"],
    "body": [
      "${1|struct,pub struct|} ${2:MyStruct}<${3:T}> where $4 {",
      "    $5: $6,$0",
      "}"
    ],
    "description": "generic struct"
  },
  "tuple struct": {
    "prefix": ["ts", "tupleStruct"],
    "body": ["${1|struct,pub struct|} ${2:MyStruct} ($3);$0"],
    "description": "tuple struct"
  },
  "trait": {
    "prefix": ["tr", "trait"],
    "body": ["${1|trait,pub trait|} ${2:MyTrait} {", "    $0", "}"],
    "description": "trait"
  },
  // Control Flows
  "if": {
    "prefix": ["if"],
    "body": ["if $1 {", "    $0", "}"],
    "description": "if clause"
  },
  "else": {
    "prefix": ["else"],
    "body": ["else {", "    $0", "}"],
    "description": "else clause"
  },
  "if else": {
    "prefix": ["ifElse"],
    "body": ["if $1 {", "    $2", "} else {", "    $0", "}"],
    "description": "if else"
  },
  "if let": {
    "prefix": ["ifLet"],
    "body": ["if ${1|let,let mut|} $2 = $3 {", "    $0", "}"],
    "description": "if let"
  },
  "if let else": {
    "prefix": ["ifLetElse"],
    "body": [
      "if ${1|let,let mut|} $2 = $3 {",
      "    $4",
      "} else {",
      "    $0",
      "}"
    ],
    "description": "if let else"
  },
  "match": {
    "prefix": ["match"],
    "body": ["match $1 {", "    $2 => {", "        $3", "    }$0", "};"],
    "description": "match"
  },
  "for": {
    "prefix": ["for"],
    "body": ["for ${1:i} in ${2:list} {", "    $0", "}"],
    "description": "for"
  },
  "loop": {
    "prefix": ["loop"],
    "body": ["loop {", "    $0", "}"],
    "description": "loop"
  },
  "while": {
    "prefix": ["while"],
    "body": ["while $1 {", "    $0", "}"],
    "description": "while"
  },
  "while let": {
    "prefix": ["whileLet"],
    "body": ["while ${1|let,let mut|} $2 = $3 {", "    $0", "}"],
    "description": "while let"
  },
  // Macros
  "assert": {
    "prefix": ["assert"],
    "body": ["assert!($1);$0"],
    "description": "assert macro"
  },
  "assert equal": {
    "prefix": ["assertEq"],
    "body": ["assert_eq!($1, $2);$0"],
    "description": "assert_eq macro"
  },
  "assert not equal": {
    "prefix": ["assertNe"],
    "body": ["assert_ne!($1, $2);$0"],
    "description": "assert_ne macro"
  },
  "format": {
    "prefix": ["format"],
    "body": ["format!(\"$1\", $2);$0"],
    "description": "format macro"
  },
  "format declaration": {
    "prefix": ["formatDeclaration"],
    "body": ["let ${1:my_string} = format!(\"$1\", $2);$0"],
    "description": "format declaration"
  },
  "log": {
    "prefix": ["log"],
    "body": ["log!(\"$1\", $2);$0"],
    "description": "log macro"
  },
  "panic": {
    "prefix": ["panic"],
    "body": ["panic!(\"$1\");$0"],
    "description": "panic macro"
  },
  "println": {
    "prefix": ["println"],
    "body": ["println!(\"$1\", $2);$0"],
    "description": "println macro"
  },
  "eprintln": {
    "prefix": ["eprintln"],
    "body": ["eprintln!(\"$1\", $2);$0"],
    "description": "eprintln macro"
  },
  "vec": {
    "prefix": ["vec"],
    "body": ["vec!([$0])"],
    "description": "vec macro"
  },
  "write": {
    "prefix": ["write"],
    "body": ["write!(${1:f}, \"$2\", $3)?;$0"],
    "description": "write macro"
  },
  "macro_rules log": {
    "prefix": ["macroRulesLog"],
    "body": [
      "macro_rules! log {",
      "    ( \\$( \\$t:tt )* ) => {",
      "        web_sys::console::log_1(&format!( \\$( \\$t )* ).into());",
      "    }",
      "}"
    ],
    "description": "macro_rules! log"
  },
  // Implementation
  "impl struct": {
    "prefix": ["is", "implStruct"],
    "body": ["impl${2:<T>} ${1:MyStruct} {", "    $0", "}"],
    "description": "implement struct"
  },
  "impl generic struct": {
    "prefix": ["igs", "implGenericStruct"],
    "body": ["impl<${2:T}> ${1:MyStruct}<$2> where $3 {", "    $0", "}"],
    "description": "implement generic struct"
  },
  "impl struct with constructor": {
    "prefix": ["iswc", "implStructWithCtor"],
    "body": [
      "impl ${1:MyStruct} {",
      "    ${2|pub fn,fn|} new($3) -> $1 {",
      "        $1 {",
      "            $0",
      "        }",
      "    }",
      "}"
    ],
    "description": "implement struct with constructor"
  },
  "impl generic struct with constructor": {
    "prefix": ["igswc", "implGenericStructWithCtor"],
    "body": [
      "impl<${2:T}> ${1:MyStruct}<$2> where $3 {",
      "    ${4|pub fn,fn|} new($5) -> $1<$2> {",
      "        $1 {",
      "            $0",
      "        }",
      "    }",
      "}"
    ],
    "description": "implement generic struct with constructor"
  },
  "impl trait": {
    "prefix": ["it", "implTrait"],
    "body": ["impl ${1:MyTrait} for ${2:MyStruct} {", "    $0", "}"],
    "description": "implement trait"
  },
  "impl trait for generic struct": {
    "prefix": ["igt", "implGenericTrait"],
    "body": [
      "impl<${3:T}> ${1:MyTrait} for ${2:MyStruct}<$3> where $4 {",
      "    $0",
      "}"
    ],
    "description": "implement trait"
  },
  "impl Deref": {
    "prefix": ["implDeref"],
    "body": [
      "impl Deref for ${1:MyStruct} {",
      "    type Target = ${2};",
      "    fn deref(&self) -> &Self::Target {",
      "        $0",
      "    }",
      "}"
    ],
    "description": "implement Deref"
  },
  "impl generic Deref": {
    "prefix": ["implGenericDeref"],
    "body": [
      "impl<${2:T}> Deref for ${1:MyStruct}<$2> where $3 {",
      "    type Target = ${4};",
      "    fn deref(&self) -> &Self::Target {",
      "        $0",
      "    }",
      "}"
    ],
    "description": "implement generic Deref"
  },
  "impl Display": {
    "prefix": ["implDisplay"],
    "body": [
      "impl fmt::Display for ${1:MyStruct} {",
      "    fn fmt(&self, ${2:f}: &mut fmt::Formatter) -> fmt::Result {",
      "        $0",
      "        Ok(())",
      "    }",
      "}"
    ],
    "description": "implement Display"
  },
  "impl generic Display": {
    "prefix": ["implGenericDisplay"],
    "body": [
      "impl<${2:T}> fmt::Display for ${1:MyStruct}<$2> where $3 {",
      "    fn fmt(&self, ${4:f}: &mut fmt::Formatter) -> fmt::Result {",
      "        $0",
      "        Ok(())",
      "    }",
      "}"
    ],
    "description": "implement Display"
  },
  "impl Drop": {
    "prefix": ["implDrop"],
    "body": [
      "impl Drop for ${1:MyStruct} {",
      "    fn drop(&mut self) {",
      "        $0",
      "    }",
      "}"
    ],
    "description": "implement Drop"
  },
  "impl generic Drop": {
    "prefix": ["implGenericDrop"],
    "body": [
      "impl<${2:T}> Drop for ${1:MyStruct}<$2> where $3 {",
      "    fn drop(&mut self) {",
      "        $0",
      "    }",
      "}"
    ],
    "description": "implement generic Drop"
  },
  "impl borrowing IntoIterator struct": {
    "prefix": ["implBorrowingIntoIteratorStruct"],
    "body": [
      "impl<'${2:a}> IntoIterator for &'$2 ${1:MyStruct} {",
      "    type Item = &'$2 ${3:MyItem};",
      "    type IntoIter = ${4:MyIterator}<'$2>;",
      "    fn into_iter(self) -> Self::IntoIter {",
      "        $4 {",
      "            $0",
      "        }",
      "    }",
      "}"
    ],
    "description": "implement borrowing IntoIterator struct"
  },
  "impl borrowing Iterator struct": {
    "prefix": ["implBorrowingIteratorStruct"],
    "body": [
      "impl<'${2:a}> Iterator for ${1:MyStruct}<'$2> {",
      "    type Item = &'$2 ${3:MyItem};",
      "    fn next(&mut self) -> Option<Self::Item> {",
      "        if $4 {",
      "            return None;",
      "        }",
      "        $0",
      "    }",
      "}"
    ],
    "description": "implement borrowing Iterator struct"
  },
  "impl borrowing iterator": {
    "prefix": ["implBorrowingIterator"],
    "body": [
      "pub struct ${1:MyStruct}BorrowingIterator<'${2:a}> {",
      "    ${4:my_struct}: &'$2 $1,$5",
      "}",
      "",
      "impl<'${2:a}> IntoIterator for &'$2 $1 {",
      "    type Item = &'$2 ${3:MyItem};",
      "    type IntoIter = $1BorrowingIterator<'$2>;",
      "    fn into_iter(self) -> Self::IntoIter {",
      "        $1BorrowingIterator {",
      "            $4: self,$6",
      "        }",
      "    }",
      "}",
      "",
      "impl<'${2:a}> Iterator for $1BorrowingIterator<'$2> {",
      "    type Item = &'$2 $3;",
      "    fn next(&mut self) -> Option<Self::Item> {",
      "        if $7 {",
      "            return None;",
      "        }",
      "        $0",
      "    }",
      "}"
    ],
    "description": "implement borrowing iterator"
  },
  "impl consuming IntoIterator struct": {
    "prefix": ["implConsumingIntoIteratorStruct"],
    "body": [
      "impl IntoIterator for ${1:MyStruct} {",
      "    type Item = ${3:MyItem};",
      "    type IntoIter = ${4:MyIterator};",
      "    fn into_iter(self) -> Self::IntoIter {",
      "        $4 {",
      "            $0",
      "        }",
      "    }",
      "}"
    ],
    "description": "implement consuming IntoIterator struct"
  },
  "impl consuming Iterator struct": {
    "prefix": ["implConsumingIteratorStruct"],
    "body": [
      "impl Iterator for ${1:MyStruct} {",
      "    type Item = ${3:MyItem};",
      "    fn next(&mut self) -> Option<Self::Item> {",
      "        if $4 {",
      "            return None;",
      "        }",
      "        $0",
      "    }",
      "}"
    ],
    "description": "implement consuming Iterator struct"
  },
  "impl consuming iterator": {
    "prefix": ["implConsumingIterator"],
    "body": [
      "pub struct ${1:MyStruct}ConsumingIterator {",
      "    ${3:my_struct}: $1,$4",
      "}",
      "",
      "impl IntoIterator for $1 {",
      "    type Item = ${2:MyItem};",
      "    type IntoIter = $1ConsumingIterator;",
      "    fn into_iter(self) -> Self::IntoIter {",
      "        $1ConsumingIterator {",
      "            $3: self,$5",
      "        }",
      "    }",
      "}",
      "",
      "impl Iterator for $1ConsumingIterator {",
      "    type Item = $2;",
      "    fn next(&mut self) -> Option<Self::Item> {",
      "        if $6 {",
      "            return None;",
      "        }",
      "        $0",
      "    }",
      "}"
    ],
    "description": "implement consuming iterator"
  },
  "impl mutable IntoIterator struct": {
    "prefix": ["implMutableIntoIteratorStruct"],
    "body": [
      "impl<'${2:a}> IntoIterator for &'$2 mut ${1:MyStruct} {",
      "    type Item = &'$2 mut ${3:MyItem};",
      "    type IntoIter = ${4:MyIterator}<'$2>;",
      "    fn into_iter(self) -> Self::IntoIter {",
      "        $4 {",
      "            $0",
      "        }",
      "    }",
      "}"
    ],
    "description": "implement mutable IntoIterator struct"
  },
  "impl mutable Iterator struct": {
    "prefix": ["implMutableIteratorStruct"],
    "body": [
      "impl<'${2:a}> Iterator for ${1:MyStruct}<'$2> {",
      "    type Item = &'$2 mut ${3:MyItem};",
      "    fn next(&mut self) -> Option<Self::Item> {",
      "        if $4 {",
      "            return None;",
      "        }",
      "        $0",
      "    }",
      "}"
    ],
    "description": "implement mutable Iterator struct"
  },
  "impl mutable iterator": {
    "prefix": ["implMutableIterator"],
    "body": [
      "pub struct ${1:MyStruct}MutableIterator<'${2:a}> {",
      "    ${4:my_struct}: &'$2 mut $1,$5",
      "}",
      "",
      "impl<'$2> IntoIterator for &'$2 mut $1 {",
      "    type Item = &'$2 mut ${3:MyItem};",
      "    type IntoIter = $1MutableIterator<'$2>;",
      "    fn into_iter(self) -> Self::IntoIter {",
      "        $1MutableIterator {",
      "            $4: self,$6",
      "        }",
      "    }",
      "}",
      "",
      "impl<'$2> Iterator for $1MutableIterator<'$2> {",
      "    type Item = &'$2 mut $3;",
      "    fn next(&mut self) -> Option<Self::Item> {",
      "        if $7 {",
      "            return None;",
      "        }",
      "        $0",
      "    }",
      "}"
    ],
    "description": "implement mutable Iterator"
  },
  // Packages
  "use": {
    "prefix": ["u", "use"],
    "body": ["${1|use,pub use|} $2;$0"],
    "description": "use"
  },
  "extern": {
    "prefix": ["extern"],
    "body": ["extern $1 {", "    $0", "}"],
    "description": "extern crate"
  },
  // Attributes
  "allow dead code": {
    "prefix": ["allowDeadCode"],
    "body": ["#[allow(dead_code)]$0"],
    "description": "allow dead code attribute"
  },
  "cfg": {
    "prefix": ["cfg"],
    "body": ["#[cfg($1)]$0"],
    "description": "cfg attribute"
  },
  "derive": {
    "prefix": ["derive"],
    "body": ["#[derive($1)]$0"],
    "description": "derive attribute"
  },
  "repr": {
    "prefix": ["repr"],
    "body": ["#[repr($1)]$0"],
    "description": "repr attribute"
  },
  "wasm_bindgen": {
    "prefix": ["wasmBindGen"],
    "body": ["#[wasm_bindgen]"],
    "description": "wasm_bindgen attribute"
  },
  // Blocks
  "unsafe": {
    "prefix": ["unsafe"],
    "body": ["unsafe {", "    $0", "}"],
    "description": "unsafe"
  },
  // Tests
  "test module": {
    "prefix": ["tm", "testModule"],
    "body": ["#[cfg(test)]", "mod ${1:tests} {", "    $0", "}"],
    "description": "cfg test attribute"
  },
  "test": {
    "prefix": ["t", "test"],
    "body": ["#[test]", "fn ${1:my_test}() {", "    $0", "}"],
    "description": "test attribute"
  }
}
