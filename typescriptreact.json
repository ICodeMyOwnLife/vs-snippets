{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  /**
   *	Component Declarations
   */
  "My Class Component": {
    "prefix": "rcc",
    "body": [
      "import React, { Component } from 'react';\n\n",
      "export default class ${1:MyComponent} extends Component<$1Props, $1State> {",
      "\treadonly state: Readonly<$1State> = {$4};\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t);",
      "\t}",
      "}\n\n",
      "export interface $1Props {$2}\n",
      "export interface $1State {$3}\n"
    ]
  },
  "My Pure Component": {
    "prefix": "rpc",
    "body": [
      "import React, { PureComponent } from 'react';\n\n",
      "export default class ${1:MyComponent} extends PureComponent<$1Props, $1State> {",
      "\treadonly state: Readonly<$1State> = {$4};\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t);",
      "\t}",
      "}\n\n",
      "export interface $1Props {$2}\n",
      "export interface $1State {$3}\n"
    ]
  },
  "My Inherited Component": {
    "prefix": "ric",
    "body": [
      "import React from 'react';",
      "import ${3:BaseComponent} from '$2';\n\n",
      "export default class ${1:MyComponent} extends $3<$1Props, $1State> {",
      "\treadonly state: Readonly<$1State> = {$6};\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t);",
      "\t}",
      "}\n\n",
      "export interface $1Props {$4}\n",
      "export interface $1State {$5}\n"
    ]
  },
  "My Function Component": {
    "prefix": "rfc",
    "body": [
      "import React, { FunctionComponent } from 'react';\n",
      "const ${1:MyComponent}: FunctionComponent<$1Props> = ({$3}) => {",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "};\n",
      "export interface $1Props {$2}\n",
      "export default $1;\n"
    ]
  },
  "My Higher Order Component": {
    "prefix": "hoc",
    "body": [
      "import React, { Component, ComponentType } from 'react';\n\n",
      "export default function ${1:MyHoc}<${2:TOwnProps}, ${3:TState}>(${4:WrappedComponent}: ComponentType<$2 & $1Props>) {",
      "\treturn class $1 extends Component<$2, $3> {",
      "\t\trender() {",
      "\t\t\tconst props: $1Props = {$6};\n",
      "\t\t\treturn (",
      "\t\t\t\t<$4 {...props} {...this.props}$0 />",
      "\t\t\t);",
      "\t\t}",
      "\t}",
      "}\n\n",
      "export interface $1Props {$5}\n"
    ]
  },
  /*
   * Component Members and Life-Cycle Methods
   */
  "My Component Constructor": {
    "prefix": "cctor",
    "body": [
      "constructor(${1:props}: ${2:Props}) {",
      "\tsuper($1);",
      "\t$0",
      "}"
    ]
  },
  "My Component State": {
    "prefix": "cstate",
    "body": ["readonly state: Readonly<${1:ComponentState}> = {$0};"]
  },
  "My defaultProps": {
    "prefix": "defaultprops",
    "body": "static readonly defaultProps: DefaultPropsOf$1<${2:Props}, \"${3}\"> = {$0};"
  },
  "My propTypes": {
    "prefix": "proptypes",
    "body": "static readonly propTypes: PropTypesOf$1<${2:Props}> = {$0};"
  },
  "My Render X Method": {
    "prefix": "renx",
    "body": [
      "private render${1:Something}($2) {",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "}"
    ]
  },
  "My Render Method": {
    "prefix": "ren",
    "body": ["render() {", "\treturn (", "\t\t$0", "\t);", "}"]
  },
  "My componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "\t$0", "}"]
  },
  "My componentDidCatch": {
    "prefix": "cdc",
    "body": [
      "componentDidCatch(${1:error}: Error, ${2:errorInfo}: ErrorInfo) {",
      "\t$0",
      "}"
    ]
  },
  "My shouldComponentUpdate": {
    "prefix": "scu",
    "body": [
      "shouldComponentUpdate(${1:nextProps}: Readonly<${2:Props}>, ${3:nextState}: Readonly<${4:State}>, ${5:nextContext}: ${6:any}): boolean {",
      "\t$0",
      "}"
    ]
  },
  "My componentWillUnmount": {
    "prefix": "cwu",
    "body": ["componentWillUnmount() {", "\t$0", "}"]
  },
  "My setNativeProps": {
    "prefix": "snp",
    "body": [
      "setNativeProps(${1:nativeProps}: Object) {",
      "\t${2:component}.setNativeProps($1);$0",
      "}"
    ]
  },
  "My getDerivedStateFromProps": {
    "prefix": "gdsfp",
    "body": [
      "static getDerivedStateFromProps(${1:nextProps}: Readonly<${2:Props}>, ${3:prevState}: ${4:State}): Partial<${4:State}> | null {",
      "\treturn {$0};",
      "}"
    ]
  },
  "My getDerivedStateFromError": {
    "prefix": "gdsfe",
    "body": [
      "static getDerivedStateFromError(${1:error}: any): Partial<${2:State}> | null {",
      "\treturn {$0};",
      "}"
    ]
  },
  "My Lazy Load Component": {
    "prefix": "lazy",
    "body": ["const ${1:Component} = lazy(() => import('$2'));"]
  }
}
