{
  // Place your snippets for typescriptreact here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  /**
   *	Component Declarations
   */
  "My React class component": {
    "prefix": ["rcc", "reactClassComponent"],
    "body": [
      "import React, { Component } from 'react';\n",
      "export default class ${1:$TM_FILENAME_BASE} extends Component<$1Props, $1State> {",
      "\treadonly state: Readonly<$1State> = {$4};\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t);",
      "\t}",
      "}\n",
      "export interface $1Props {$2}\n",
      "interface $1State {$3}\n"
    ]
  },
  "My React pure component": {
    "prefix": ["rpc", "reactPureComponent"],
    "body": [
      "import React, { PureComponent } from 'react';\n",
      "export default class ${1:$TM_FILENAME_BASE} extends PureComponent<$1Props, $1State> {",
      "\treadonly state: Readonly<$1State> = {$4};\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t);",
      "\t}",
      "}\n",
      "export interface $1Props {$2}\n",
      "interface $1State {$3}\n"
    ]
  },
  "My React inherited component": {
    "prefix": ["ric", "reactInheritedComponent"],
    "body": [
      "import React from 'react';",
      "import ${3:BaseComponent} from '$2';\n",
      "export default class ${1:$TM_FILENAME_BASE} extends $3<$1Props, $1State> {",
      "\treadonly state: Readonly<$1State> = {$6};\n",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t$0",
      "\t\t);",
      "\t}",
      "}\n",
      "export interface $1Props {$4}\n",
      "interface $1State {$5}\n"
    ]
  },
  "My React function component declaration": {
    "prefix": ["rfcd", "reactFunctionComponentDeclaration"],
    "body": [
      "import React, { memo } from 'react';\n",
      "export function ${1:$TM_FILENAME_BASE}Impl<${2:T}> ({$4}: $1Props<$2>) {",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "}\n",
      "const ${1} = memo($1Impl);",
      "$1.displayName = '$1';",
      "export default $1;\n",
      "export interface $1Props<$2> {$3}\n"
    ]
  },
  "My React function component expression": {
    "prefix": ["rfc", "reactFunctionComponent"],
    "body": [
      "import React, { FC, memo } from 'react';\n",
      "export const ${1:$TM_FILENAME_BASE}Impl: FC<$1Props> = ({$4}) => {",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "};\n",
      "const $1 = memo($1Impl);",
      "$1.displayName = '$1';",
      "export default $1;\n",
      "export interface $1Props {$2}\n"
    ]
  },
  "My higher-order component": {
    "prefix": ["hoc", "higherOrderComponent"],
    "body": [
      "import React, { Component, ComponentType } from 'react';\n",
      "export default function ${1:$TM_FILENAME_BASE}<${2:TOwnProps}, ${3:TState}>(${4:WrappedComponent}: ComponentType<$2 & $1Props>) {",
      "\treturn class $1 extends Component<$2, $3> {",
      "\t\trender() {",
      "\t\t\tconst props: $1Props = {$6};\n",
      "\t\t\treturn (",
      "\t\t\t\t<$4 {...props} {...this.props}$0 />",
      "\t\t\t);",
      "\t\t}",
      "\t}",
      "}\n",
      "export interface $1Props {$5}\n"
    ]
  },
  /*
   * Component Members and Life-Cycle Methods
   */
  "My React component constructor": {
    "prefix": ["cCtor"],
    "body": [
      "constructor(${1:props}: ${2:Props}) {",
      "\tsuper($1);",
      "\t$0",
      "}"
    ]
  },
  "My React component state": {
    "prefix": ["cState"],
    "body": ["readonly state: Readonly<${1:ComponentState}> = {$0};"]
  },
  "My defaultProps": {
    "prefix": ["defaultProps"],
    "body": "static readonly defaultProps: DefaultPropsOf$1<${2:Props}, \"${3}\"> = {$0};"
  },
  "My propTypes": {
    "prefix": ["propTypes"],
    "body": "static readonly propTypes: WeakValidationMap$1<${2:Props}> = {$0};"
  },
  "My React renderX method": {
    "prefix": ["renX"],
    "body": [
      "private render${1:Something}($2) {",
      "\treturn (",
      "\t\t$0",
      "\t);",
      "}"
    ]
  },
  "My React render method": {
    "prefix": ["ren"],
    "body": ["render() {", "\treturn (", "\t\t$0", "\t);", "}"]
  },
  "My componentDidMount": {
    "prefix": ["cdm"],
    "body": ["componentDidMount() {", "\t$0", "}"]
  },
  "My componentDidCatch": {
    "prefix": ["cdc"],
    "body": [
      "componentDidCatch(${1:error}: Error, ${2:errorInfo}: ErrorInfo) {",
      "\t$0",
      "}"
    ]
  },
  "My shouldComponentUpdate": {
    "prefix": ["scu"],
    "body": [
      "shouldComponentUpdate(${1:nextProps}: Readonly<${2:Props}>, ${3:nextState}: Readonly<${4:State}>, ${5:nextContext}: ${6:any}): boolean {",
      "\t$0",
      "}"
    ]
  },
  "My componentWillUnmount": {
    "prefix": ["cwu"],
    "body": ["componentWillUnmount() {", "\t$0", "}"]
  },
  "My setNativeProps": {
    "prefix": ["snp"],
    "body": [
      "setNativeProps(${1:nativeProps}: Object) {",
      "\t${2:component}.setNativeProps($1);$0",
      "}"
    ]
  },
  "My getDerivedStateFromProps": {
    "prefix": ["gdsfp"],
    "body": [
      "static getDerivedStateFromProps(${1:nextProps}: Readonly<${2:Props}>, ${3:prevState}: ${4:State}): Partial<${4:State}> | null {",
      "\treturn {$0};",
      "}"
    ]
  },
  "My getDerivedStateFromError": {
    "prefix": ["gdsfe"],
    "body": [
      "static getDerivedStateFromError(${1:error}: any): Partial<${2:State}> | null {",
      "\treturn {$0};",
      "}"
    ]
  },
  "My React lazy load component": {
    "prefix": "lazy",
    "body": ["const ${2:Component} = lazy(() => import('$1'));"]
  }
}
